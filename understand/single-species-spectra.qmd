---
title: "Single species spectra"
---

## Introduction

At the end of the previous tutorial we plotted single-species size spectra from our dataset and observed that they were a bit of a mess. In this tutorial we will use the mizer model to gain an understanding of what determines the shape of a species size spectrum.

In this tutorial you are also going to start using mizer functions. When you want to learn more about any of the functions that we use in the examples, simply click on the function name. This will open the function's help page in a new browser window.

First, load some required packages with the following commands:

```{r message=FALSE}
remotes::install_github("sizespectrum/mizerExperimental")
library(mizerExperimental)
library(tidyverse)
```

Note how for the mizerExperimental package we also call `remotes::install_github()`. This will reinstall the package only if it has changed on GitHub since you last installed it. If nothing has changed, the command will just issue a message to reassure you of that fact. So for packages that improves as frequently as mizerExperimental, it is always a good idea to call `remotes::install_github()` frequently.

If you get error messages saying that the tidyverse package is not available, you will need to install that package as well. This was discussed in the preparatory tutorial on [installing tools](../prepare/install-tools.qmd#r-packages).

## Single-species model

In the first four tutorials this week we will want to keep the size-spectrum aspects of the mizer model separate from the multi-species aspects, in order to not have to think about too many things at once. So we will explore a model where a single species lives in a non-dynamical background community that we will set to a Sheldon power-law abundance. Only in the last tutorial this week on [species interactions](species-interactions.qmd) will we start to consider the interesting multi-species phenomena that arise in mizer models.

In this tutorial we will only be interested in the shape of the size spectrum, i.e., in how the total number of individuals is distributed over the different sizes. We are not yet interested in the overall abundance of the species. The overall abundance would be influenced by the total rate of reproduction for the species. This in turn would be influenced by the size spectrum, because that determines how many of the individuals are mature. This dynamic feedback will of course become important when we build real-world models in week 2 and use them in week 3. But for now we have enough on our plate without thinking also about this.

Mizer collects all the parameters describing a size-spectrum model into one object of class `MizerParams`. You do not need to set up this object by hand but instead there are several wrapper functions in mizer that create the object for you for various types of models, and also many functions for changing specific parameters in a model. We will use the `newSingleSpeciesParams()` function to set up a model describing a single fish species living in an ecosystem whose community size spectrum is given by a power-law.

The `newSingleSpeciesParams()` function has many arguments that allow you to specify parameters for the fish species as well as for the community, but all these arguments have default values, so we can simply call the function without specifying those arguments. We will only specify the power-law exponent `lambda` of the background community

```{r}
params <- newSingleSpeciesParams(lambda = 2.05)
```

The function returns a `MizerParams` object and we have assigned that to the variable `params`. We will be explaining more about this model as we go along.

## Steady state spectrum

As a final simplification in this tutorial and the next, we will only consider the steady state size spectra. The steady state is the state where in each size class the inflow of individuals through growth exactly balances the outflow of individuals through growth and death. The initial abundances in the `params` object that we created with `newSingleSpeciesParams()` has also been set to the steady-state abundances.

We can plot the size spectrum with the `plotSpectra()` function.

```{r}
plotSpectra(params, power = 0)
```

The `power = 0` argument to the `plotSpectra()` function specifies that we want to plot the number density, rather than for example the biomass density.

The green line represents the number density of the background community, labelled as "Resource" in the plot legend, in which our foreground species finds itself. The green line is a straight line with slope `lambda = -2.05`. Thus the number density of the background community is proportional to $w^{-2.05}$. It is important to understand that a power-law curve looks like a straight line when plotted on logarithmic axes and the slope of the line is the exponent in the power law. If this does not sound familiar, please revisit the section in the previous tutorial where we [fitted a power-law](observed-size-spectra.qmdfitting-a-power-law) to the community spectrum.

The other line represents the number density of our single species, which by default is just named unimaginatively "Target species". We see that it is a straight line initially, but then has a bump before declining rapidly at large sizes. We will discuss in a short while what causes that shape.

The initial slope of the species number density is negative, which means vaguely that there are fewer larger fish than smaller fish. That is of course understandable: some fish die while they are growing up, so there tend to be fewer fish in larger size classes.

It is now time to do the first exercise of this tutorial. For this go to your copy of this week's worksheet repository and open the file "worksheet2-single-species-spectra.Rmd" in RStudio. There you will find the following first exercise:

::: {.callout-caution collapse="false"}
### Exercise 1

Create a MizerParams object describing a single species in a power-law background where the Sheldon exponent is 2.1. Then plot the number density as a function of weight.
:::



# Numbers

While the `plotSpectra()` function gives us a plot of the number density, it would be nice if we could get at the actual numerical values. We can access them with the `initialN()` function. Let us assign this to a variable `n`:

```{r}
n <- initialN(params)
```

As you can see in the "Environment" pane in RStudio, `n` is a matrix with 1 row and 101 columns. The one row corresponds to the one species. In a multispecies model there would be one row for each species, holding the number density for that species. The 101 columns are for the number densities in each of the 101 size classes. In fact, `n` is a named array, i.e., each row and each column has names. These we can extract with the `dimnames()` function.

```{r}
dimnames(n)
```

The names of the columns are the weight in grams at the start of each size class. Notice how R displays long vectors by breaking them across many lines and starting each line with a number in brackets. That number is the index of the first value in that row. So for example we see that the 61st size class starts at 1 gram. The number density in the size class between 1 gram and 1.12 grams is

```{r}
n[1, 61]
```

It is important to realise that this is not the number of fish in the size class, but the average number density in the size class. To get the number of fish we have to multiply the number density by the width of the size class. Those widths can be obtained with the `dw()` function. So the number of fish in the 61st size class is

```{r}
(n * dw(params))[1, 61]
```

You may be surprised by the small number if you interpret it as the number of fish between 1 gram and 1.12 gram in the entire ocean. However it looks more reasonable if it is the average number per square meter of sea. For more of a discussion of this issue of working with numbers per area, numbers per volume or numbers for the entire system see <https://sizespectrum.org/mizer/reference/setParams.html#units-in-mizer>

::: {.callout-caution collapse="false"}
### Exercise 2

Determine the total number of fish in the model with sizes between 10 grams and 20 grams. You can use the `sum()` function to add together contributions from the various size classes.
:::

# Biomass spectra

Without the `power` argument (or with `power = 1` which is the default) the `plotSpectra()` function plots the biomass density as a function of weight.

```{r}
plotSpectra(params)
```

Now the green line representing the biomass density of the background has a slope of -1.05.

The initial slope of the species biomass density is negative, meaning that the biomass density decreases with size. This means that even though the individual fish of course gain biomass as they grow up, there is so much death among the larvae and juvenile fish that the total biomass of any cohort nevertheless decreases as it grows up. We will explain the reason for this in the next tutorial when we discuss [predation mortality](predation-growth-and-mortality.qmd#predation-mortality).

We can also plot the Sheldon spectrum, i.e., the biomass density in log weight, by supplying the argument `power = 2` to `plotSpectra()`. We discussed this way of describing the size spectrum in the section on [Densities in log weight](observed-size-spectra.html#densities-in-log-weight) in the previous tutorial.

```{r}
plotSpectra(params, power = 2)
```

This now shows an approximately constant background biomass density in log size (the slope of the green line is -0.05). The biomass density of the species in log size initially increases. So if binned in logarithmically-sized bins the biomass in each bin will initially increase, until it starts decreasing close to the maximum size of the species.

It may have been a bit confusing that we displayed the same size spectrum in three different ways. But it is important to be aware of this because in the literature you will see all different conventions being used, so if you see a plot of a size spectrum you always need to ask yourself exactly which density is being shown.

We can obtain the biomass density in a size class from the number density by multiplying the number density by the weight of the individuals in the size class. To obtain these weights, we use the function `w()` that returns the weights at the start of each size class. Of course using these will lead to a discretisation error because not all fish in the size class have the same weight, but with the small size classes that we use in mizer, the error is not too important. So we calculate

```{r}
biomass_density <- n * w(params)
```

The total biomass in each size class we obtain by multiplying the biomass density in each size class by the width of each size class

```{r}
biomass <- biomass_density * dw(params)
```

For example the biomass of fish between 1 gram and 1.12 grams is

```{r}
biomass[61]
```

Next we will discuss the shape of the species size-spectrum in more detail.

# Allometric rates

The first striking feature of the species size-spectrum, in all its representations, is that for small fish (larvae and juveniles) it is given by a straight line. This is due to the allometric scaling of the physiological rates, which we will discuss in this section. The other striking feature is the bulge at around maturity size, which we will discuss in the section on the [shape of the adult spectrum](#shape-of-adult-spectrum).

We will assume that the metabolic rate, i.e., the rate at which an organism expends energy on its basic metabolic needs, scales as a power of the organism's body size, and the power is about $p = 3/4$.

Because this energy needs to be supplied by consumption of food, it is natural to assume that also the consumption rate scales allometrically with a power of $n = 3/4$. When the consumption is greater than the metabolic cost then the excess leads to growth. Hence the growth rate too scales allometrically with power $3/4$. While these are standard choices for the allometric exponents, mizer allows you to choose other values for $p$ and $n$.

Finally, the death rate of organisms tends to scale allometrically with a power of $n - 1 = 3/4 - 1 = -1/4$. This means that the death rate experienced by larger individuals is smaller than that of small individuals.

It is a result of the mathematics that if the growth and death rates scale allometrically with exponents $p$ and $1-p$ respectively, for some metabolic exponent $p$, that the number density at steady state is also a power law, i.e., a straight line on the log-log plot.

Let us check that in our model the physiological rates are indeed power laws, at least for the small sizes. We can get the growth rate with the `getEGrowth()` function. We assign the result to a variable that we name `growth_rate`.

```{r}
growth_rate <- getEGrowth(params)
```

You can again see in the "Environment" pane that this is a matrix with one row for the one species and 101 columns for the 101 size classes. So for example the growth rate at size 1 gram is

```{r}
growth_rate[1, 61]
```

(because we had seen that the 61st size class starts at 1 gram). This is the instantaneous per-capita growth rate, measured in grams per year.

We would like to make a log-log plot of the growth rate against size to check that it gives a straight line. We will use `ggplot()` for that purpose. `ggplot()` likes to work with data frames instead of named matrices, so we first convert the matrix into a data frame with the `melt()` function.

```{r}
growth_rate_frame <- melt(growth_rate)
```

You can see in the "Environment" pane that the new variable that we called `growth_rate_frame` is a data frame with 101 observations of 3 variables. The 101 observations correspond to the 101 size classes. The 3 variables have names

```{r}
names(growth_rate_frame)
```

They are the species `sp`, the size `w`, and the `value` which contains the growth_rate. This data frame we can pass to `ggplot()`.

```{r}
p <- ggplot(growth_rate_frame) +
    geom_line(aes(x = w, y = value)) +
    scale_x_log10() +
    scale_y_log10() +
    labs(x = "Weight [g]",
         y = "Growth rate [g/year]")
p
```

Note how we linked the x axis to the `w` variable and the y axis to the `value` variable and specified that both axes should be on a logarithmic scale.

We see that at least up to a size of a few grams the line is straight. Let's isolate the growth rate for those smaller sizes

```{r}
g_small_fish <- filter(growth_rate_frame, w <= 10)
```

and fit a linear model

```{r}
lm(log(g_small_fish$value) ~ log(g_small_fish$w))
```

```{r include=FALSE}
gm <- lm(log(g_small_fish$value) ~ log(g_small_fish$w))
g0 <- round(gm$coefficients[[1]], digits=3)
```

The slope of the line is indeed $0.75 = 3/4$. In fact, the above shows that for juveniles $$\log(g(w)) = `r g0` + \frac34 \log(w)$$ and thus $$g(w) = g_0\ w^p = `r g0`\  w^{3/4}.$$

Of course in a real model, the growth rate would not so exactly follow a power law, due to variations in the growth rate due to variations in food availability, for example.

```{r include=FALSE}
mort_rate_frame <- melt(getMort(params))
mm <- lm(log(mort_rate_frame$value) ~ log(mort_rate_frame$w_prey))
m0 <- round(mm$coefficients[[1]], digits = 3)
```

::: {.callout-caution collapse="false"}
## Exercise 3

Use the methods you have just seen to make a log-log plot of the mortality rate. You can get the mortality rate with the `getMort()` function. While adjusting the code to this new task, you need to take into account that the name of the size-dimension of the array returned by `getMort()` is `"w_prey"` instead of `"w"`.

Then fit a linear model to determine the slope and and intercept and thus the allometric exponent and the coefficient for the mortality rate.
:::

# Slope of juvenile spectrum

We have seen that for juvenile fish the growth rate and the death rate are both power laws with exponents $p=3/4$ and $p-1=-1/4$ respectively. By solving a differential equation we can derive that the juvenile spectrum also follows a power law: $$N(w) = N_0\ w^{-\mu_0/g_0 - p}$$

I won't do the maths here with you (and you probably don't want me to anyway), but we can check this claim numerically. Let's look at the spectrum up to 10 grams. By now we know how to do this. We first convert the number density matrix `n` into a dataframe and then filter out all observations that do not have $w\leq 10$. The resulting data frame we pass to `ggplot()` and ask it to plot a line on log-log axes.

```{r}
nf <- melt(n) %>% 
  filter(w <= 10)
ggplot(nf) +
  geom_line(aes(x = w, y = value)) +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "Weight [g]",
       y = "Number density [1/g]")
```

That confirms what we had seen earlier, that for fish less than 10 grams the number density is a power law. To determine the exponent of the power law we need the slope of that straight line in the log-log plot, and the easiest way to do that is to fit a linear model to the log variables:

```{r}
lm(log(nf$value) ~ log(nf$w))
```

```{r include=FALSE}
jm <- lm(log(nf$value) ~ log(nf$w))
jexp <- round(jm$coefficients[[2]], digits = 3)
```

The linear model fit says that the exponent is `r jexp`. The mathematics claimed that the exponent should be $-\mu_0 / g_0 - p$. We have already observed that $\mu_0 = `r m0`$ and $g_0 = `r g0`$ so we get

```{r}
-m0 / g0 - 3/4
```

That is not quite the result of the linear model fit, but that is the nature of numerical calculations: one gets discretisation errors and rounding errors.

# Shape of adult spectrum {#shape-of-adult-spectrum}

Now that we understand the shape of the size spectrum for the juvenile fish, let us try to understand the shape of the adult spectrum. Here is the plot again, but with the $w$ axis restricted to weights above 10g:

```{r}
plotSpectra(params, wlim = c(10, NA))
```

The increase of abundance that we see at around the maturity size of our species is due to a drop in growth rate at that size. This in turn is due to the fact that the mature fish invests some of its energy income into reproduction.

## Investment into reproduction

Let us look at a plot of the proportion of the available energy that is invested into reproduction as a function of the size. This is the product of the proportion of individuals that are mature (obtained with the function `mature()` and the proportion of their energy income that a mature fish invests into reproduction (obtained with the function `repro_prop()`.

```{r}
psi <- melt(maturity(params) * repro_prop(params))
ggplot(psi) +
  geom_line(aes(x = w, y = value)) +
  labs(x = "Weight [g]",
       y = "Proportion invested into reproduction")
```

How was this maturity curve specified? You can find the details in the [mizer documentation](https://sizespectrum.org/mizer/reference/setReproduction.html#investment). There are four species parameters involved:

-   the maturity size `w_mat` at which 50% of the individuals are mature.
-   the size `w_mat25` at which 25% of the individuals are mature.
-   the asymptotic size `w_inf` at which an organism invests 100% of its income into reproduction and thus growth is zero.
-   an exponent `m` that determines how the proportion that an individual invests into reproduction scales with its size.

Such species parameters are contained in a data frame inside the `params` object that we can access with the `species_params()` function.

```{r}
species_params(params)
```

As you can see, there are a lot of other species parameters, some of which we will talk about later. For now let's just select the 4 parameters we are interested in.

```{r}
select(species_params(params), w_mat, w_mat25, w_inf, m)
```

## Change in maturity curve

Let us investigate what happens when we change the maturity curve. Let's assume the maturity size is actually 40 grams and the size at which 25% of individuals is mature is 30 grams. Let us change the values in the `species_params` data frame. But first we make a copy of the params object so that we can keep the old version around unchanged.

```{r}
params_changed_maturity <- params
```

In this copy we now change the species parameters

```{r}
species_params(params_changed_maturity)$w_mat <- 40
species_params(params_changed_maturity)$w_mat25 <- 30
select(params_changed_maturity@species_params, w_mat, w_mat25, w_inf, m)
```

Now the maturity curve has changed, which we can verify by plotting it

```{r}
psi_changed_maturity <- melt(maturity(params_changed_maturity) * 
                               repro_prop(params_changed_maturity))
ggplot(psi_changed_maturity) +
  geom_line(aes(x = w, y = value)) +
  labs(x = "Weight [g]",
       y = "Proportion invested into reproduction")
```

### Two curves in one plot

At this point let's take a little break and learn how to draw two curves in the same graph. How can we see the old maturity curve and the new maturity curve in the same plot? First we add an extra column to each dataframe describing it

```{r}
psi$type = "original"
psi_changed_maturity$type = "changed"
```

Then we bind the two data frames together

```{r}
psi_combined <- rbind(psi, psi_changed_maturity)
```

and send that combined data frame to `ggplot()`

```{r}
ggplot(psi_combined) +
  geom_line(aes(x = w, y = value, colour = type)) +
  labs(x = "Weight [g]",
       y = "Proportion invested into reproduction")
```

This change in the maturity curve of course implies a change in the growth rates.

::: {.callout-caution collapse="false"}
### Exercise 4

Make a plot showing the growth rates of the original model and of the model with the changed maturity curve.
:::

### Effect of changed maturity

Next let us look at how the steady state spectrum has changed. We first need to run calculate the new steady state with

```{r}
params_changed_maturity <- singleSpeciesSteady(params_changed_maturity)
```

Then we can use the same technique as above to plot the steady-state spectra of both models on top of each other.

```{r}
nf <- melt(initialN(params) * w(params)^2)
nf_changed_maturity <- melt(initialN(params_changed_maturity) * w(params)^2)
nf$type <- "original"
nf_changed_maturity$type <- "changed"
nf_combined <- rbind(nf, nf_changed_maturity)
ggplot(nf_combined) +
  geom_line(aes(x = w, y = value, colour = type)) +
  scale_x_log10(limits = c(10, NA)) +
  scale_y_log10() +
  labs(x = "Weight [g]",
       y = "Number density [1/g]")
```

As expected, the bump happens later due to the larger maturity size and it is less pronounced, because the maturity curve is less steep.

This was our first investigation of how the shape of a species size spectrum changes as model parameters are changed. We will do much more in this direction in the next tutorial in which we discuss how growth and mortality are determined through predation.

TODO: Write summary points
