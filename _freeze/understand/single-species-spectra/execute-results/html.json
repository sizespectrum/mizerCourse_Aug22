{
  "hash": "f25b3dbc2d3a3b371d98d34c896aa6ab",
  "result": {
    "markdown": "---\ntitle: \"Single species spectra\"\n---\n\n\n## Introduction\n\nAt the end of the previous tutorial we plotted single-species size spectra from our dataset and observed that they were a bit of a mess. In this tutorial we will use the mizer model to gain an understanding of what determines the shape of a species size spectrum.\n\nIn this tutorial you are also going to start using mizer functions. When you want to learn more about any of the functions that we use in the examples, simply click on the function name. This will open the function's help page in a new browser window.\n\nFirst, load some required packages with the following commands:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-1_f18d169c770e398ad6a75b12f2594768'}\n\n```{.r .cell-code}\nremotes::install_github(\"sizespectrum/mizerExperimental\")\nlibrary(mizerExperimental)\nlibrary(tidyverse)\n```\n:::\n\n\nNote how for the mizerExperimental package we also call `remotes::install_github()`. This will reinstall the package only if it has changed on GitHub since you last installed it. If nothing has changed, the command will just issue a message to reassure you of that fact. So for packages that improve as frequently as mizerExperimental, it is always a good idea to call `remotes::install_github()` frequently.\n\nYou will be doing your own work for this tutorial in the accompanying worksheet file \"worksheet2-single-species-spectra.Rmd\". You will find this file in the worksheet repository for this week that you already used during the previous tutorial.\n\n## Single-species model\n\nIn this and the next tutorial we want to keep the size-spectrum aspects of the mizer model separate from the multi-species aspects, in order to not have to think about too many things at once. So we will explore a model where a single species lives in a non-dynamical background community that we will set to a Sheldon power-law abundance. Only in the fourth tutorial of this week exploring [species interactions](species-interactions.qmd) will we start to consider the interesting multi-species phenomena that arise in mizer models.\n\nIn this tutorial we will only be interested in the shape of the size spectrum, i.e., in how the total number of individuals is distributed over the different sizes. We are not yet interested in the overall abundance of the species. The overall abundance would be influenced by the total rate of reproduction and recruitment for the species. This in turn would be influenced by the size spectrum, because that determines how many of the individuals are mature. This dynamic feedback will of course become important when we build real-world models in week 2 and use them in week 3. But for now we have enough on our plate without thinking also about this.\n\nMizer collects all the parameters describing a size-spectrum model into one object of class `MizerParams`. You do not need to set up this object by hand but instead there are several wrapper functions in mizer that create the object for you for various types of models, and also many functions for changing specific parameters in a model. We will use the `newSingleSpeciesParams()` function to set up a model describing a single fish species living in an ecosystem whose community size spectrum is given by a power-law.\n\nThe `newSingleSpeciesParams()` function has many arguments that allow you to specify parameters for the fish species as well as for the community, but all these arguments have default values, so we can simply call the function without specifying those arguments. We will only specify the power-law exponent `lambda` of the background community. Note that in mizer the size spectrum exponent refers to the number density on a linear weight axis x and is therefore expected to be around 2.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-2_71dfe2feab32ef79c6eb232dd8499e54'}\n\n```{.r .cell-code}\nparams <- newSingleSpeciesParams(lambda = 2.05)\n```\n:::\n\n\nThe function returns a `MizerParams` object and we have assigned that to the variable `params`. We will be explaining more about this model as we go along.\n\n## Steady state spectrum\n\nAs a final simplification in this and the next two tutorials, we will only consider the steady state size spectra. The steady state is the state where in each size class the inflow of individuals through growth exactly balances the outflow of individuals through growth and death. This means that the size spectrum is in equilibrium. You might have heard that models are often \"initialised\" from some initial species abundances and then ran to equilibrium until species biomasses and size distributions stop changing. However, we can calculate what sort of initial abundance we need to ensure that a species is in an equilibrium and this is what mizer does. The initial size spectra in the `params` object that we created with `newSingleSpeciesParams()` have already been set to the steady state size spectra.\n\nWe can plot the size spectrum with the `plotSpectra()` function.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-3_eef0e92e18b1efa42397b547689879d5'}\n\n```{.r .cell-code}\nplotSpectra(params, power = 0)\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe `power = 0` argument to the `plotSpectra()` function specifies that we want to plot the number density, rather than for example the biomass density. We'll discuss this more below in the section on [other representations](#other-representations).\n\nThe green line represents the number density of the background community, labelled as \"Resource\" in the plot legend, in which our foreground species finds itself. The green line is a straight line with slope `lambda = -2.05`. Thus the number density of the background community is proportional to $w^{-2.05}$. It is important to understand that a power-law curve looks like a straight line when plotted on logarithmic axes and the slope of the line is the exponent in the power law. If this does not sound familiar, please revisit the section in the previous tutorial where we [fitted a power-law](observed-size-spectra.qmdfitting-a-power-law) to the community spectrum.\n\nThe other line represents the number density of our single species, which by default is just named unimaginatively \"Target species\". We see that it is a straight line initially, but then has a bump before declining rapidly at large sizes. We will discuss in a short while what causes that shape.\n\nRemember what these size spectra plots indicate? They show the number density of individuals as a function of size. The initial slope of the target species' number density is negative, which vaguely means that there are fewer larger fish than smaller fish. That is of course understandable: lots of fish die while they are growing up, so there tend to be fewer fish in larger size classes.\n\nIt is now time to do the first exercise of this tutorial. To complete the exercise, go to your copy of this week's worksheet repository and open the file \"worksheet2-single-species-spectra.Rmd\" in RStudio. There you will find the following first exercise:\n\n::: {.callout-caution collapse=\"false\"}\n### Exercise 1\n\nCreate a MizerParams object describing a single species in a power-law background where the Sheldon exponent is 2.1. Then plot the number density as a function of weight.\n:::\n\n## Numbers {#numbers}\n\nWhile the `plotSpectra()` function gives us a plot of the number density, it would be nice if we could get at the actual numerical values. We can access them with the `initialN()` function. Let us assign this to a variable `n`:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-4_49e6a423896e2bbdc8528a922293cbe8'}\n\n```{.r .cell-code}\nn <- initialN(params)\n```\n:::\n\n\nAs you can see in the \"Environment\" pane in RStudio, `n` is a matrix with 1 row and 101 columns. The one row corresponds to the one species. In a multispecies model there would be one row for each species, holding the number density for that species. The 101 columns are for the number densities in each of the 101 size classes. By default mizer uses 100+1 size clases (or size bins), although you can easily change that. In fact, `n` is a named array, i.e., each row and each column has names. These we can extract with the `dimnames()` function.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-5_72507a085f4ce2571269ac9ff7ba5404'}\n\n```{.r .cell-code}\ndimnames(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sp\n[1] \"Target species\"\n\n$w\n  [1] \"0.001\"   \"0.00112\" \"0.00126\" \"0.00141\" \"0.00158\" \"0.00178\" \"0.002\"  \n  [8] \"0.00224\" \"0.00251\" \"0.00282\" \"0.00316\" \"0.00355\" \"0.00398\" \"0.00447\"\n [15] \"0.00501\" \"0.00562\" \"0.00631\" \"0.00708\" \"0.00794\" \"0.00891\" \"0.01\"   \n [22] \"0.0112\"  \"0.0126\"  \"0.0141\"  \"0.0158\"  \"0.0178\"  \"0.02\"    \"0.0224\" \n [29] \"0.0251\"  \"0.0282\"  \"0.0316\"  \"0.0355\"  \"0.0398\"  \"0.0447\"  \"0.0501\" \n [36] \"0.0562\"  \"0.0631\"  \"0.0708\"  \"0.0794\"  \"0.0891\"  \"0.1\"     \"0.112\"  \n [43] \"0.126\"   \"0.141\"   \"0.158\"   \"0.178\"   \"0.2\"     \"0.224\"   \"0.251\"  \n [50] \"0.282\"   \"0.316\"   \"0.355\"   \"0.398\"   \"0.447\"   \"0.501\"   \"0.562\"  \n [57] \"0.631\"   \"0.708\"   \"0.794\"   \"0.891\"   \"1\"       \"1.12\"    \"1.26\"   \n [64] \"1.41\"    \"1.58\"    \"1.78\"    \"2\"       \"2.24\"    \"2.51\"    \"2.82\"   \n [71] \"3.16\"    \"3.55\"    \"3.98\"    \"4.47\"    \"5.01\"    \"5.62\"    \"6.31\"   \n [78] \"7.08\"    \"7.94\"    \"8.91\"    \"10\"      \"11.2\"    \"12.6\"    \"14.1\"   \n [85] \"15.8\"    \"17.8\"    \"20\"      \"22.4\"    \"25.1\"    \"28.2\"    \"31.6\"   \n [92] \"35.5\"    \"39.8\"    \"44.7\"    \"50.1\"    \"56.2\"    \"63.1\"    \"70.8\"   \n [99] \"79.4\"    \"89.1\"    \"100\"    \n```\n:::\n:::\n\n\nThe names of the columns are the weight in grams at the start of each size class. Notice how R displays long vectors by breaking them across many lines and starting each line with a number in brackets. That number is the index of the first value in that row. So for example we see that the 61st size class starts at 1 gram. The number density in the size class between 1 gram and 1.12 grams (the start of the next size class) is\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-6_2c9f18af2ddfaf487fddf5f36b89ba9e'}\n\n```{.r .cell-code}\nn[1, 61]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0003282314\n```\n:::\n:::\n\n\nIt is important to realise that this is not the number of fish in the size class, but the average number density in the size class. To get the number of fish we have to multiply the number density by the width of the size class. Those widths can be obtained with the `dw()` function. So the number of fish in each size class is obtained with\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-7_8368e64ca4161eacbbddeb9e4acafa2c'}\n\n```{.r .cell-code}\nnumbers <- n * dw(params)\n```\n:::\n\n\nThe number of individuals in the size class between 1 gram and 1.12 grams is\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-8_2be458055deaebadee88149edbe7cb51'}\n\n```{.r .cell-code}\nnumbers[1, 61]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.005029e-05\n```\n:::\n:::\n\n\nYou may be surprised by the small number if you interpret it as the number of fish between 1 gram and 1.12 gram in the entire ocean. However it looks more reasonable if it is the average number per square meter of sea. For more of a discussion of this issue of working with numbers per area, numbers per volume or numbers for the entire system see <https://sizespectrum.org/mizer/reference/setParams.html#units-in-mizer>\n\n::: {.callout-caution collapse=\"false\"}\n### Exercise 2\n\nDetermine the total number of fish in the model with sizes between 10 grams and 20 grams. You can use the `sum()` function to add together contributions from the various size classes.\n:::\n\nAgain, you should complete this exercise in the worksheet in which you already completed exercise 1.\n\n## Other representations {#other-representations}\n\nWe have seen in the previous tutorial on [observed size spectra](observed-size-spectra.qmd) that the size spectrum can be represented in various ways. Besides the number density $N(w)$ we introduced the biomass density $B(w)$, the number density in log weight $N_{\\log}(w)$ and the biomass density in log weight $B_{\\log}(w)$. These were related to each other by multiplication by different powers of $w$:\n\n\n$$B(w) = N_{\\log}(w) = w N(w) \\text{ and } B_{\\log}(w) = w^2 N(w).$$\n\n\nWe can use the `power` argument of the `plotSpectra()` function to determine which of these densities to plot. Above we plotted the number density by setting `power = 0`. Without the `power` argument (or with `power = 1` which is the default) the `plotSpectra()` function plots the biomass density as a function of weight, which is also the number density as a function of log weight:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-9_671a070fdd0481975c3ccc839d5bd828'}\n\n```{.r .cell-code}\nplotSpectra(params)\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNow the green line representing the biomass density of the background has a slope of -1.05 and not the -2.05 number density slope that we actually set when creating the params object.\n\nThe initial slope of the species biomass density is also negative, meaning that the biomass density in the species decreases with size.\n\nWe can also plot the biomass density in log weight, i.e., the Sheldon spectrum, by supplying the argument `power = 2` to `plotSpectra()`.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-10_ead0bfb3fa406d0765cb51c67b13609a'}\n\n```{.r .cell-code}\nplotSpectra(params, power = 2)\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThis now shows an approximately constant background biomass density in log weight (the slope of the green line is -0.05). The biomass density of the species in log size initially increases. So if binned in logarithmically-sized bins the biomass in each bin will initially increase, until it starts decreasing close to the maximum size of the species.\n\nThis latest plot seems to indicate that most of the biomass of the species is concentrated at larger sizes of around 30 grams, whereas the previous plot seemed to indicate that most of the biomass is at the smallest sizes. So which one is true? Please think about this question, because it really highlights the importance of not confusing biomass density with biomass. Questions about the amount of biomass **at a size** do not make sense. Instead you have to ask about biomass **in a size range**.\n\nSo for example, we might want to consider the prey biomass available to two different predators of our species, one small and one large. Assume that the smaller predator feeds on prey in the size range from 1g to 2g. The other predator, which we assume is 10 times larger, feeds on prey in the size range from 10g to 20g. These feeding intervals have the same width on the logarithmic weight axis. Therefore we should look at the plot of the biomass density in log weight to see that the larger predator has a lot more prey biomass from our species available to it than the smaller one. This is in spite of the fact that the plot of biomass density in weight tells us that the biomass density is lower at 10g than at 1g.\n\nIt may have been a bit confusing that we displayed the same size spectrum in three different ways. But it is important to be aware of this because in the literature you will see all different conventions being used, so if you see a plot of a size spectrum you always need to ask yourself exactly which density is being shown.\n\n## Biomass\n\nAs we did for [numbers](#numbers) above, let us also look at how to extract biomasses from the model.\n\nWe already said above that we can obtain the biomass density in a size class from the number density by multiplying the number density by the weight of the individuals in the size class. To obtain the appropriate weights, we use the function `w()` that returns the weights at the start of each size class. So we calculate\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-11_0796fec84bd46ffb1bb6bb6b771afd74'}\n\n```{.r .cell-code}\nbiomass_density <- n * w(params)\n```\n:::\n\n\nWe obtain the total biomass in each size class by multiplying the biomass density in each size class by the width of each size class\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-12_3c250d713ba0d879fcb88679b2d4d1ba'}\n\n```{.r .cell-code}\nbiomass <- biomass_density * dw(params)\n```\n:::\n\n\nFor example the biomass of fish between 1 gram and 1.12 grams is\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-13_bab22158b932195de52de73e2964659e'}\n\n```{.r .cell-code}\nbiomass[61]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.005029e-05\n```\n:::\n:::\n\n\nLet us briefly present yet another way to represent the size distribution. When we talk about size spectra, we always have the representation in terms of densities in mind. You may already be familiar with the concept of a densities from probability theory, where you can describe a probability distribution in terms of its probability density function. But perhaps you also know that there is an alternative description of the probability distribution in terms of the cumulative distribution function. We can similarly describe the size distribution of the biomass by a cumulative biomass distribution function, which gives the total biomass of all sizes up to a specific size.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-14_53b1d486c305585469d1ac61408e192f'}\n\n```{.r .cell-code}\n# Initialise an array with the right dimensions\ncumulative_biomass <- biomass\n# Calculate the cumulative sum of all biomasses in previous bins\ncumulative_biomass[] <- cumsum(biomass)\n# Normalise this so that it is given as a percentage of the total biomass\ncdf <- cumulative_biomass / cumulative_biomass[1, 101] * 100\n# Melt the array to a data frame and then plot\nggplot(melt(cdf), aes(x = w, y = value)) +\n    geom_line() + \n    labs(x = \"Weight [g]\",\n         y = \"% of total biomass\")\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThis plot shows us for example that 50% of the individuals are smaller than 12.5g and only a very small percentage is larger than 75g.\n\nThe biomass density is the slope of this graph. We can also plot the cumulative biomass distribution function on a logarithmic weight axis:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-15_62f15ce40d1fc1b9f0d612c82246c119'}\n\n```{.r .cell-code}\nggplot(melt(cdf), aes(x = w, y = value)) +\n    geom_line() +\n    labs(x = \"Weight [g]\",\n         y = \"% of total biomass\") +\n    scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThis graph contains exactly the same information as the previous graph, just showing more detail at smaller sizes and less detail at larger sizes. We can see for example that about 20% of individuals are less than 1g, which was difficult to see in the previous graph. The slope of this graph is the biomass density in log weight.\n\n## Allometric rates\n\nThe first striking feature of the species size-spectrum, independently of which density you plot, is that for small fish (larvae and juveniles) it is given by a straight line. This is due to the allometric scaling of the physiological rates that our model is assuming and which we will discuss in this section. The other striking feature is the bulge at around maturity size, which we will discuss in the section on the [shape of the adult spectrum](#shape-of-adult-spectrum).\n\nWe will assume that the metabolic rate, i.e., the rate at which an organism expends energy on its basic metabolic needs, scales as a power of the organism's body size, and the power is about $p = 3/4$.\n\nBecause this energy needs to be supplied by consumption of food, it is natural to assume that also the consumption rate scales allometrically with a power of $n = 3/4$. When the consumption is greater than the metabolic cost then the excess leads to growth. Hence the growth rate too scales allometrically with power $3/4$.\n\nIn a multi-species mizer model the mortality is an emergent property that depends on the abundance of predators. In this single species model the mortality rate is set to the one that would emerge if all the species in the fixed background community predated with the same ferocity as the target species. This leads to a mortality rate that scale allometrically with a power of $n - 1 = 3/4 - 1 = -1/4$. This means that the death rate experienced by larger individuals is smaller than that of small individuals.\n\nIt is a result of the mathematics that if the growth and death rates scale allometrically with exponents $p$ and $1-p$ respectively, for some metabolic exponent $p$, that the number density at steady state is also a power law, i.e., a straight line on the log-log plot.\n\nLet us check that in our model the physiological rates are indeed power laws, at least for the small sizes. We can get the growth rate with the `getEGrowth()` function. We assign the result to a variable that we name `growth_rate`.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-16_d517c7059b3e93c4ffc273ad0834c09c'}\n\n```{.r .cell-code}\ngrowth_rate <- getEGrowth(params)\n```\n:::\n\n\nYou can again see in the \"Environment\" pane that this is a matrix with one row for the one species and 101 columns for the 101 size classes. So for example the growth rate at size 1 gram is\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-17_6c21334c4669bf344e8293f290305d19'}\n\n```{.r .cell-code}\ngrowth_rate[1, 61]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.26968\n```\n:::\n:::\n\n\n(because we had seen that the 61st size class starts at 1 gram). This is the instantaneous per-capita growth rate, measured in grams per year. Note that in mizer all rates are measured in units of year, but for many people daily values are easier to understand. Since growth rate here is an instantaneous rate we can simply divide it by 365 to get a daily rate (although note that mizer does not simulate processes on daily time steps). This gives us a growth rate per day for a 1g sized fish of\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-18_151b4e9dd9579237ebaf684ef047fe14'}\n\n```{.r .cell-code}\ngrowth_rate[1, 61] / 365\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02265666\n```\n:::\n:::\n\n\nWe would like to make a log-log plot of the growth rate against size to check that it gives a straight line. We will use `ggplot()` for that purpose. `ggplot()` likes to work with data frames instead of named matrices, so we first convert the matrix into a data frame with the `melt()` function.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-19_3a0a007a89453a9188eadf61c0ba60b8'}\n\n```{.r .cell-code}\ngrowth_rate_frame <- melt(growth_rate)\n```\n:::\n\n\nYou can see in the \"Environment\" pane that the new variable that we called `growth_rate_frame` is a data frame with 101 observations of 3 variables. The 101 observations correspond to the 101 size classes. The 3 variables have names\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-20_a028902827ade13521b5b3edb964a2bc'}\n\n```{.r .cell-code}\nnames(growth_rate_frame)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sp\"    \"w\"     \"value\"\n```\n:::\n:::\n\n\nThey are the species `sp`, the size `w`, and the `value` which contains the growth_rate. This data frame we can pass to `ggplot()`.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-21_413a47139da4cd9f27e42b2c68e92538'}\n\n```{.r .cell-code}\np <- ggplot(growth_rate_frame) +\n    geom_line(aes(x = w, y = value)) +\n    scale_x_log10(name = \"Weight [g]\") +\n    scale_y_log10(name = \"Growth rate [g/year]\")\n\np\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nNote how we linked the x axis to the `w` variable and the y axis to the `value` variable and specified that both axes should be on a logarithmic scale.\n\nWe see that at least up to a size of a few grams the line is straight. Let's isolate the growth rate for those smaller sizes\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-22_b3116765d29b85984caf03155e840b86'}\n\n```{.r .cell-code}\ng_small_fish <- filter(growth_rate_frame, w <= 10)\n```\n:::\n\n\nand fit a linear model\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-23_9b0fdde202229a4a44a37c7395526f55'}\n\n```{.r .cell-code}\nlm(log(g_small_fish$value) ~ log(g_small_fish$w))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = log(g_small_fish$value) ~ log(g_small_fish$w))\n\nCoefficients:\n        (Intercept)  log(g_small_fish$w)  \n              2.113                0.750  \n```\n:::\n:::\n\n\n\n\nThe slope of the line is indeed $0.75 = 3/4$. In fact, the above shows that for juveniles $$\\log(g(w)) = 2.113 + \\frac34 \\log(w)$$ and thus $$g(w) = g_0\\ w^p = 2.113\\  w^{3/4}.$$\n\nOf course in a real model, the growth rate would not so exactly follow a power law, because growth rate would vary depending on food availability, for example. In this example food is the background resource and its abundance is fixed, so food abundance does not vary.\n\n\n\n\n\n::: {.callout-caution collapse=\"false\"}\n### Exercise 3\n\nUse the methods you have just seen to make a log-log plot of the mortality rate. You can get the mortality rate with the `getMort()` function. While adjusting the code to this new task, you need to take into account that the name of the size-dimension of the array returned by `getMort()` is `\"w_prey\"` instead of `\"w\"`.\n\nThen fit a linear model to determine the slope and and intercept and thus the allometric exponent $r$ and the coefficient $\\mu_0$ for the mortality rate $$\\mu(w) = \\mu_0 w^r.$$\n:::\n\n## Slope of juvenile spectrum\n\nWe have seen that for juvenile fish the growth rate and the death rate are both power laws with exponents $p=3/4$ and $r=p-1=-1/4$ respectively. By solving a differential equation we can derive that the juvenile spectrum also follows a power law: $$N(w) = N_0\\ w^{-\\mu_0/g_0 - p}$$\n\nI won't do the maths here with you (and you probably don't want me to anyway), but we can see that the result makes sense. It tells us that the number density drops of faster with size if the mortality rate coefficient $\\mu_0$ is higher or if the growth rate coefficient $g_0$ is smaller, which is what we would expect.\n\nWe can also check this claim numerically. Let's look at the spectrum of individuals up to 10 grams. By now we know how to do this. We first convert the number density matrix `n` into a dataframe and then filter out all observations that do not have $w\\leq 10$. The resulting data frame we pass to `ggplot()` and ask it to plot a line on log-log axes.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-26_c8386b13fb2f8fd4734c7893711cc80f'}\n\n```{.r .cell-code}\nnf <- melt(n) %>% \n  filter(w <= 10)\n\nggplot(nf) +\n  geom_line(aes(x = w, y = value)) +\n  scale_x_log10(name = \"Weight [g]\") +\n  scale_y_log10(name = \"Number density [1/g]\")\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nThat confirms what we had seen earlier, that for fish less than 10 grams the number density is a power law. To determine the exponent of the power law we need the slope of that straight line in the log-log plot, and the easiest way to do that is to fit a linear model to the log variables:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-27_7013a917cc09877ec9eeb0c23bcdad83'}\n\n```{.r .cell-code}\nlm(log(nf$value) ~ log(nf$w))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = log(nf$value) ~ log(nf$w))\n\nCoefficients:\n(Intercept)    log(nf$w)  \n     -8.022       -1.682  \n```\n:::\n:::\n\n\n\n\nThe linear model fit says that the exponent is -1.682. The mathematics claimed that the exponent should be $-\\mu_0 / g_0 - p$. We have already observed that $\\mu_0 = 2.038$ and $g_0 = 2.113$ so we get\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-29_c98e7b2033c0834aff4d7c5a8b1bc417'}\n\n```{.r .cell-code}\n-m0 / g0 - 3/4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.714505\n```\n:::\n:::\n\n\nThat is not quite the result of the linear model fit, but that is the nature of numerical calculations: one gets discretisation errors and rounding errors. Anyway it is close enough. And it is also amazing how we can calculate expected numbers of fish from basic assumptions and rules. Of course natural ecosystems never look like that, but if we have theoretical expectations derived from clear assumptions (about growth and mortality rate and food availability), we can start asking questions about which processes in natural ecosystems deviate from these generic assumptions, why this happens and how it should affect the observed size spectra.\n\n## Shape of adult spectrum {#shape-of-adult-spectrum}\n\nNow that we understand the shape of the size spectrum for the juvenile fish, let us try to understand the shape of the adult spectrum. Here is the plot of the biomass density again, but with the $w$ axis restricted to weights above 10g:\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-30_ac1f0081b00fb74e7f574a0ea0f08911'}\n\n```{.r .cell-code}\nplotSpectra(params, wlim = c(10, NA))\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nThe increase of abundance that we see at around the maturity size of our species is due to a drop in growth rate at that size. This in turn is due to the fact that the mature fish invests some of its energy into reproduction. So the details of the shape of the adult spectrum will be influenced both by food intake, maintenance and mortality (like in juveniles), but also by how adults split their energy income between growth and reproduction.\n\n### Investment into reproduction\n\nLet us look at a plot of the proportion of the available energy that is invested into reproduction as a function of the size. This is the product of the proportion of individuals that are mature (obtained with the function `maturity()` and the proportion of their energy income that a mature fish invests into reproduction (obtained with the function `repro_prop()`.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-31_96227428021b856a56fbf898a40ac43f'}\n\n```{.r .cell-code}\nreprod_proportion <- maturity(params) * repro_prop(params)\n# Convert the array to a data frame for ggplot\npsi <- melt(reprod_proportion)\n\np <- ggplot(psi) +\n    geom_line(aes(x = w, y = value)) +\n    labs(x = \"Weight [g]\",\n         y = \"Proportion invested into reproduction\")\n\np\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nHow was this maturity curve specified? You can find the details in the [mizer documentation](https://sizespectrum.org/mizer/reference/setReproduction.html#investment). There are four species parameters involved:\n\n-   the maturity size `w_mat` at which 50% of the individuals are mature.\n-   the size `w_mat25` at which 25% of the individuals are mature.\n-   the asymptotic size `w_inf` at which an organism invests 100% of its income into reproduction and thus growth is zero.\n-   an exponent `m` that determines how the proportion that an individual invests into reproduction scales with its size.\n\nSuch species parameters are contained in a data frame inside the `params` object that we can access with the `species_params()` function.\n\n\n::: {.cell df-print='tibble' hash='single-species-spectra_cache/html/unnamed-chunk-32_ce9994330431b7b012e6214a0a7fb360'}\n\n```{.r .cell-code}\nspecies_params(params)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"species\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"w_min\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_inf\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_mat\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_min_idx\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"k_vb\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gamma\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ks\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f0\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fc\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"beta\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sigma\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z0\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"alpha\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"erepro\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"interaction_resource\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"q\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pred_kernel_type\"],\"name\":[20],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"h\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"k\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_mat25\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"m\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"R_max\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Target species\",\"2\":\"0.001\",\"3\":\"100\",\"4\":\"25.11886\",\"5\":\"1\",\"6\":\"1\",\"7\":\"4067.903\",\"8\":\"5.906914\",\"9\":\"0.6\",\"10\":\"0.25\",\"11\":\"100\",\"12\":\"1.3\",\"13\":\"0\",\"14\":\"0.4\",\"15\":\"0.899483\",\"16\":\"1\",\"17\":\"0.75\",\"18\":\"0.75\",\"19\":\"0.8\",\"20\":\"lognormal\",\"21\":\"59.06914\",\"22\":\"0\",\"23\":\"22.50546\",\"24\":\"1\",\"25\":\"Inf\",\"_rn_\":\"Target species\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAs you can see, there are a lot of other species parameters, some of which we will talk about later. For now let's just select the 4 parameters we are interested in.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-33_ea022f4d2e13e18370a45b6f034a215f'}\n\n```{.r .cell-code}\nselect(species_params(params), w_mat, w_mat25, w_inf, m)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"w_mat\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_mat25\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_inf\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"m\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"25.11886\",\"2\":\"22.50546\",\"3\":\"100\",\"4\":\"1\",\"_rn_\":\"Target species\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAnd with this knowledge of parameter we can improve the plot for clarity and add a vertical line at 25% and 50% maturation weight\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-34_5a506e7b7cb2dc7391d3ce6307fe7a77'}\n\n```{.r .cell-code}\nmaturation_weight50 <- species_params(params)$w_mat\nmaturation_weight25 <- species_params(params)$w_mat25\n\np + geom_vline(xintercept = maturation_weight50, lty = 2) +\n    geom_vline(xintercept = maturation_weight25, lty = 2, col = \"grey\")\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n### Change in maturity curve\n\nLet us investigate what happens when we change the maturity curve. Let's assume the maturity size is actually 40 grams and the size at which 25% of individuals is mature is 30 grams. Let us change the values in the `species_params` data frame. But first we make a copy of the params object so that we can keep the old version around unchanged.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-35_67c09c5c85e10c92843f826a0ab119ff'}\n\n```{.r .cell-code}\nparams_changed_maturity <- params\n```\n:::\n\n\nIn this copy we now change the species parameters\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-36_1bdc9c6db400348305f1787b8188bf17'}\n\n```{.r .cell-code}\nspecies_params(params_changed_maturity)$w_mat <- 40\nspecies_params(params_changed_maturity)$w_mat25 <- 30\nselect(species_params(params_changed_maturity), w_mat, w_mat25, w_inf, m)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"w_mat\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_mat25\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w_inf\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"m\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"40\",\"2\":\"30\",\"3\":\"100\",\"4\":\"1\",\"_rn_\":\"Target species\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nNow the maturity curve has changed, which we can verify by plotting it\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-37_00092450259a5e33266648de7600f885'}\n\n```{.r .cell-code}\npsi_changed_maturity <- melt(maturity(params_changed_maturity) * \n                                 repro_prop(params_changed_maturity))\n\nggplot(psi_changed_maturity) +\n    geom_line(aes(x = w, y = value)) +\n    geom_vline(xintercept = species_params(params_changed_maturity)$w_mat, \n               lty = 2) +\n    geom_vline(xintercept = species_params(params_changed_maturity)$w_mat25, \n               lty = 2, col = \"grey\") + \n    labs(x = \"Weight [g]\",\n         y = \"Proportion invested into reproduction\")\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### Two curves in one plot\n\nAt this point let's take a little break and learn how to draw two curves in the same graph. How can we see the old maturity curve and the new maturity curve in the same plot? First we add an extra column to each dataframe describing it\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-38_f7948efc2ad580325c555f67c5d969b2'}\n\n```{.r .cell-code}\npsi$type = \"original\"\npsi_changed_maturity$type = \"changed\"\n```\n:::\n\n\nThen we bind the two data frames together\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-39_a0a43730decb0ca9a83095fc5e0654dd'}\n\n```{.r .cell-code}\npsi_combined <- rbind(psi, psi_changed_maturity)\n```\n:::\n\n\nand send that combined data frame to `ggplot()`\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-40_4d9b4a35ce59f7274439577a29f3c98a'}\n\n```{.r .cell-code}\nggplot(psi_combined) +\n    geom_line(aes(x = w, y = value, colour = type)) +\n    labs(x = \"Weight [g]\",\n         y = \"Proportion invested into reproduction\")\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nThis change in the maturity curve of course implies a change in the growth rates.\n\n::: {.callout-caution collapse=\"false\"}\n### Exercise 4\n\nMake a plot showing the growth rates of the original model and of the model with the changed maturity curve.\n:::\n\n### Effect of changed maturity\n\nNext let us look at how the change in the maturity parameters affects the steady state spectrum. First need to calculate the new steady state using the function `singleSpeciesSteady()`.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-41_51fb5f0c9c8cc14d246a25786b952d01'}\n\n```{.r .cell-code}\nparams_changed_maturity <- singleSpeciesSteady(params_changed_maturity)\n```\n:::\n\n\nThen we can use the function `plotSpectra2()` to plot the old size spectrum and the new size spectrum on the same graph.\n\n\n::: {.cell hash='single-species-spectra_cache/html/unnamed-chunk-42_bc48ce6a80e7c7917e333c60e25248a6'}\n\n```{.r .cell-code}\nplotSpectra2(params, \"Early maturity\",\n             params_changed_maturity, \"Late maturity\",\n             power = 2, resource = FALSE, wlim = c(10, NA))\n```\n\n::: {.cell-output-display}\n![](single-species-spectra_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nAs expected, the bump happens later due to the larger maturity size and it is less pronounced, because the maturity curve is less steep. This means that fish do not suddenly start investing most of their energy into reproduction, but still keep growing while they are maturity. Since they are still growing they will be moving from one size class to another and fewer individuals will accumulate in one size class.\n\nThis was our first investigation of how the shape of a species size spectrum changes as model parameters are changed. We will do much more in this direction in the next tutorial in which we discuss how growth and mortality are determined through predation.\n\n## Summary and recap\n\n1\\) The steady state is the state where the system has reached an equilibrium in which the rate at which individuals grow into each size class is equal to the rate at which individuals either grow out of the size class or die in the size class.\n\n2\\) Mizer stores the size spectrum in the form of the number density in size classes. To get the numbers in a size class we need to multiply the number density by the width of the size class (dw). To get total biomass in each size class we further multiple this value by the weight of this size class (w).\n\n3\\) Allometric scaling of physiological rates with size plays a big role in a mizer model and shapes the size spectrum.\n\n4\\) We studied a single species living in a fixed background community with a power-law spectrum. In this simple case we can determine the steady state spectrum and find that the juvenile spectrum is given by a power law whose exponent is determined by the ratio of mortality to growth and is different from the community spectrum power law.\n\n5\\) As fish mature they start investing some of their energy into reproduction and hence their growth slows. This leads to a bump in the size spectrum. We saw how changes in the parameters describing the maturity ogive change the shape of that bump.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}