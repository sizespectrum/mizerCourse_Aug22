{
  "hash": "ab3623d40491a76577f53b1752af6cbc",
  "result": {
    "markdown": "---\ntitle: \"Run your own scenarios\"\n---\n\n\n## Projecting future scenarios\n\nMizer can be used to explore future scenarios, where a simulation continues to project through time under different potential scenarios (e.g. to test fisheries management options or climate change scenarios). The goal of this and the next \"changing resources\" tutorial is to who you how to set these up these projections so that you can design your own future scenarios to explore.\n\nAs usual, we need to have some packages installed.\n\n\n::: {.cell code_folding='true' hash='run-your-own-scenarios_cache/html/set-up_af3a8f4356bd80ee6bb9cfaccbc05301'}\n::: {.cell-output .cell-output-stdout}\n```\nhttr (1.4.3 -> 1.4.4) [CRAN]\n\n  There is a binary version available but the source version is later:\n     binary source needs_compilation\nhttr  1.4.3  1.4.4             FALSE\n\n* checking for file ‘/private/var/folders/w7/3yk2257x6016ch_prhf0wwrshwgt88/T/RtmptBjRkN/remotes1a0d448cf719/sizespectrum-mizerExperimental-2465461/DESCRIPTION’ ... OK\n* preparing ‘mizerExperimental’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‘mizerExperimental_2.3.1.tar.gz’\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n* checking for file ‘/private/var/folders/w7/3yk2257x6016ch_prhf0wwrshwgt88/T/RtmptBjRkN/remotes1a0d74b6f0ae/sizespectrum-mizerMR-7ef0515/DESCRIPTION’ ... OK\n* preparing ‘mizerMR’:\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‘mizerMR_0.0.3.tar.gz’\n```\n:::\n:::\n\n\n\n\nLet's start by exploring what happens if we change fishing in the future. To do this we set up two scenarios, one where the model starts with the last time step of the fished scenario and continues into the future  (the \"status quo\"). The other will be designed to explore \"more sustainable scenario\". Let's pick up the the model output we saved from the end of the last tutorial.\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-1_75eed53a00889a7df10e32cc118f628a'}\n\n```{.r .cell-code}\nsim<-readRDS(\"simf3.rds\")\nparams<-sim@params\n```\n:::\n\n\nThe effort values in 2020 were\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-2_44d83d37238f391273222d6e686d8858'}\n\n:::\n\n\nLet's start a new simulation that begins with the logistic effort from 2020 and projects forward for 50 years. We will apply a linear decrease in effort for toothfish to a target value (here assumed for simplicity to be F=0.2).\n\nTo do this we need to work the effort array again (time x gear) to enable changes in effort through time.\n\n\n::: {.cell code_folding='true' hash='run-your-own-scenarios_cache/html/unnamed-chunk-3_95b9637a3148df1e9492dae805ce6502'}\n\n:::\n\n\nThat was Scenario 1 (\"status quo\"), now let's set up Scenario 2, the \"more sustainable\" option we wish to explore. \nAgain, if we are working in the same units as the effort above\nwe can change the F below to scale effort to be consistent with a value of F=0.2. So we need to set effort= catchability/targetF \nOtherwise if you assume targetF= catchability*E, and set catchability to 1, you can just use targetF=0.2 directly for Scenario 2.\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-4_1d7b1f6698e3cb40107d8ca798594e61'}\n\n```{.r .cell-code}\nproj_effort_scen2 <- proj_effort_scen1\ntargetF<-0.2/gear_params(params)$catchability[1]\nselect_gear=\"longline\"\n# reach target by 10 years\nproj_effort_scen2[1:10,select_gear] <- \n    seq(from = proj_effort_scen2[1], to = targetF, length = 10)\n# then hold at target\nproj_effort_scen2[11:50, select_gear] <- targetF\n# check it\n#plot(proj_effort_scen2,typ=\"l\")\n```\n:::\n\n\n\nNow we want to run the simulation forward using the *project* function.\n\n\n::: {.cell code_folding='true' hash='run-your-own-scenarios_cache/html/unnamed-chunk-5_c1a08b1457e8d3b7751992ba4d5b91ea'}\n\n```{.r .cell-code}\n# run the simulations forward, both using the 2020 abundances as initial values\nparams <- setInitialValues(params, sim)\nsim_scen1 <- project(params, effort = proj_effort_scen1, t_max = 50)\nsim_scen2 <- project(params, effort = proj_effort_scen2, t_max = 50)\n```\n:::\n\n\nHow has this affected the catches and the biomass of other species in the system relative to fishing levels in 2020?\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-6_60951039293f56957d4f1523202c8b2d'}\n\n```{.r .cell-code}\n#set the scenario to examine relative to 2020 levels\nscen<-sim_scen2\nplotYield(scen)\n```\n\n::: {.cell-output-display}\n![](run-your-own-scenarios_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot change in biomass under each scenario relative to current values\nB_current <- getBiomass(scen)[1, ]\nBrel_scen <- melt(sweep(getBiomass(scen), 2, B_current, \"/\"))\ncolnames(Brel_scen)[2] <- \"Species\"\nlegend_levels <- intersect(names(scen@params@linecolour), Brel_scen$Species)\nggplot(Brel_scen) + \n  geom_line(aes(x = time,y = value,color = Species), size = 1) + \n  geom_hline(yintercept = 1, linetype = 1, colour = \"grey\", size = 0.75) +\n  scale_y_continuous(name = \"Relative biomass\") +\n  scale_color_manual(values = sim@params@linecolour[legend_levels]) +\n  theme(legend.key = element_rect(fill = \"white\")) \n```\n\n::: {.cell-output-display}\n![](run-your-own-scenarios_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\nThe above plot shows that relative to 2020 reducing fishing mortality to 0.2 still results in further declines in biomass and catches.\n\nTo compare the status of the stock we need to express the changes relative to the unfished state according to the model. This will provide us with a rough indicator of the level of depletion. Generally, we would consider a stock to be collapsed if biomass was < 0.1 of the unfished levels. Some data-poor single species fisheries management strategies seek for depletion to be around or above 0.5 of unfished levels.\n\nLet's take a look at the relative exploitation status of the stocks using the projected values for 2050. We will put the y-axis scale is log10 to better visualise the differences across species. \n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-7_381bda7db560abc8f696b1d7a24a2a04'}\n\n```{.r .cell-code}\n# plot change in biomass under each scenario relative to unfished values\n# get saved values from steady state without fishing (previous tutorial)\nsim0<-readRDS(\"sim0.rds\")\n# get the unfished biomasses\nB_unfished <- getBiomass(sim0)[1, ]\n#scen 1\nBrel_scen1_2050 <- getBiomass(sim_scen1)[\"2050\",]/B_unfished\n\n#scen 2\nBrel_scen2_2050 <- getBiomass(sim_scen2)[\"2050\",]/B_unfished\n\nBrel_scens <- rbind(data.frame(species=names(Brel_scen1_2050),value=Brel_scen1_2050,scen=\"scen1\"),data.frame(species=names(Brel_scen2_2050),value=Brel_scen2_2050,scen=\"scen2\"))\n\n# barplot comparing the 2 scenarios by 2050\nggplot(Brel_scens, aes(fill=scen, y=value, x=species)) + \n    geom_bar(position=\"dodge\", stat=\"identity\") + \n     geom_hline(yintercept = 0.1, linetype = 2, colour = \"red\", size = 0.5)  + scale_y_log10(name = \"log10(Biomass/Biomass Unfished)\")\n```\n\n::: {.cell-output-display}\n![](run-your-own-scenarios_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsaveRDS(sim_scen2,\"sim_scen2.rds\")\n```\n:::\n\nSpecies with B/B_unfished values that are below the red dashed line imply the stock is still collapsed.\n\nWe can see that when we decrease fishing to the targetF under scenario 2 this slightly improves the relative biomass compared to the status quo. Recovery would require lower levels of F to ensure sustainable fishing in the long-term. Another thing to note is that relative to the unfished community there are several species that actually increase under this fishing scenario - this is what happens when account for food web interactions in models!  \n\n## Set up your own fishing scenario: simpler comparison of steady states\n\nRather than an entire time-series, we can also simply examine differences between two time-averaged states under different fishing regimes.\n\nWe can alter the fishing parameters using a function called *gear_params()* and by changing the *effort* input.\n\nLet's take a look at the fishing parameters.\n\nWe can group species together according to the gears they are caught by. Let's imagine a big super trawler.\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-8_7e40d2d0aca0ce74c01d7aece6b8e3d9'}\n\n```{.r .cell-code}\n# allocate species to gear types\ngear_params(params) <- data.frame(\n    gear = c(\"longline\", \"super_trawler\"),\n    species = c(\"D.ele\", \"C.gun\"),\n    catchability = c(1, 1),\n    sel_fun = c(\"knife_edge\", \"knife_edge\"),\n    knife_edge_size = c(2722, 52)\n    )\n#check it\ngear_params(params)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"gear\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"species\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"catchability\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sel_fun\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"knife_edge_size\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sel_func\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"longline\",\"2\":\"D.ele\",\"3\":\"1\",\"4\":\"knife_edge\",\"5\":\"2722\",\"6\":\"knife_edge\",\"_rn_\":\"D.ele, longline\"},{\"1\":\"super_trawler\",\"2\":\"C.gun\",\"3\":\"1\",\"4\":\"knife_edge\",\"5\":\"52\",\"6\":\"knife_edge\",\"_rn_\":\"C.gun, super_trawler\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nNote that catchability is set to 1. This is because the fishing \"effort\" was here assumed to be the fishing mortality rate of fully selected sizes (see here [setFishing](https://sizespectrum.org/mizer/reference/setFishing.html?q=set%20fishing)).\n\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-9_ca1ecd96e4c1f149675f56020ce208dd'}\n\n```{.r .cell-code}\nparams <- setFishing(params, initial_effort = 0.1)\n```\n:::\n\n\nNow let's run two simulations, one with light fishing mortality (F = 0.2) and one heavy fishing (F = 1.5).\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-10_36dd7b72326432ce9139f6762cb56f75'}\n\n```{.r .cell-code}\nsim_unfished <- projectToSteady(params, effort = 0, t_max = 500)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nConvergence was achieved in 201 years.\n```\n:::\n\n```{.r .cell-code}\nparams_longline_trawl<-params\nsim_longline_trawl <- projectToSteady(params_longline_trawl, effort = 0.1, t_max = 500)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nConvergence was achieved in 111 years.\n```\n:::\n\n```{.r .cell-code}\nparams_longline<-params\ngear_params(params_longline)$catchability[2]=0\nsim_longline <- projectToSteady(params_longline, effort = 0.1, t_max = 500)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nConvergence was achieved in 36 years.\n```\n:::\n:::\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-11_549f8b59c198501a23f700a32c9e58f1'}\n\n```{.r .cell-code}\n# plot change in biomass under each scenario relative to unfished values\n# get the unfished biomasses\nB_unfished <- getBiomass(sim_unfished)\n#scen 1\nBrel_longline <- getBiomass(sim_longline)/B_unfished\n\n#scen 2\nBrel_longline_trawl <- getBiomass(sim_longline_trawl)/B_unfished\n\nBrel_scens <- rbind(data.frame(species=names(Brel_longline),value=Brel_longline,scen=\"longline\"),data.frame(species=names(Brel_longline_trawl),value=Brel_longline_trawl,scen=\"longline_trawl\"))\n\n# barplot comparing the 2 scenarios by 2050\nggplot(Brel_scens, aes(fill=scen, y=value, x=species)) + \n    geom_bar(position=\"dodge\", stat=\"identity\") + \n     geom_hline(yintercept = 0.1, linetype = 2, colour = \"red\", size = 0.5)  + scale_y_log10(name = \"log10(Biomass/Biomass Unfished)\")\n```\n\n::: {.cell-output-display}\n![](run-your-own-scenarios_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAs we saw before large individuals are the most affected by the high fishing effort. This create a trophic cascade where smaller individuals, even if they are affected by the same fishing effort, will increase in abundance due to the release in predation from larger individuals.\n\nWe can also extract the species biomasses:\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-12_5edc7b7a0ccf9e14a5f2bd494495536f'}\n\n```{.r .cell-code}\nbiomass<-rbind(getBiomass(sim_light)[100,],getBiomass(sim_heavy)[100,])\nrow.names(biomass)<-c(\"light\",\"heavy\")\n```\n:::\n\n\nAs well as yields:\n\n\n::: {.cell hash='run-your-own-scenarios_cache/html/unnamed-chunk-13_a2e689ac5e1fa7d660fa0fc595e074a4'}\n\n```{.r .cell-code}\nyield<-rbind(getYield(sim_light)[100,],getYield(sim_heavy)[100,])\nrow.names(yield)<-c(\"light\",\"heavy\") \n```\n:::\n\n\n**Exercise: Now try to edit one of the above code examples to create your own fishing scenario.**\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}