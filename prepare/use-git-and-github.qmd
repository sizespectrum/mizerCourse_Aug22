---
title: "Use Git and GitHub"
---

In this course we will collaborate via Git and GitHub. This means that if you have not used these tools before, then you will have to learn some new concepts and get used to a particular workflow. The investment of your time will more than pay off. Developing your research code with Git and GitHub has great advantages, and it'll be great if this course gets you hooked on these tools. The use we make of Git and GitHub in this course is relatively simple, so it may be the perfect gateway drug.

We'll start by first introducing some of the ideas theoretically, but then we will also show what the workflow looks like in practice.

## Theory

### Git

[**Git**](https://git-scm.com/) is a distributed version control system. So we will start by explaining the "version control" and the "distributed". We'll typeset typical Git terminology in bold.

**Version control** means that while you are working on your code or data files you can keep track of all the changes you are making. You can then later review the history of changes and, if necessary, go back to earlier versions. You may say that any cloud storage service like Google Drive or Dropbox does that as well, but there are important differences that we will now discuss.

1.  Git keeps the **repository** with all your changes on your local computer. The version control does not rely on an internet connection.

2.  You explicitly say when you want a batch of changes to be stored in the repository. Saving changes to the files in your local file area does not yet modify the repository. You have to make a so-called **commit** to commit the changes you want to the repository.

3.  Typically you will add a **commit message** that summarises briefly what the changes are about. This makes it much easier to understand the development of your code later on.

**Distributed** means that the repository typically does not reside only on a single computer. There can be **clones** of the repository on many other computers. For example, you might want your collaborators to have a copy of the repository for a common project that you are working on jointly. They can make commits to their clone of the repository in the same way you can make commits to yours. Of course from time to time you will want to **merge** the changes from one clone to another. For that there needs to be some communication via the internet, facilitated by a Git server.

### GitHub

[**GitHub**](https://github.com) is a service that hosts a clone of your repository and runs a Git server, so that you and your collaborators do not have to run your own Git servers. Instead you can **push** any commits that you made to your local repository to the GitHub clone and then your collaborators can **pull** those changes to their clone.

So with Git and GitHub we have a very different workflow than what you get when you collaborate using for example a Google Drive folder. There are more steps before your collaborator sees your changes, namely:

1)  you **save** your changes to your drive into a directory associated with the git repository,
2)  you **stage** the changes that you want to be committed to the repository,
3)  you **commit** those selected changes to your repository,
4)  you **push** your commits to GitHub,
5)  your collaborator **pulls** your commits from GitHub,
6)  these commits automatically get **merged** into their clone,
7)  the changed files are **checked out** from their repository into the corresponding directory on their drive.

If you pull commits from GitHub that want to change files that you have also made changes to locally, then you will be asked to either **commit**, **revert** or **stash** your changes before doing the pull. If you and your collaborator independently made commits to your respective clones that touched the same lines of code then there may be **merge conflicts** that need to be resolved by hand. But you probably won't have to worry about such issues for this course.

If you and your collaborator independently made commits to your respective clones that touched the same lines of code then there may be **merge conflicts** that need to be resolved by hand. But you probably won't have to worry about such issues for this course.

This more involved workflow takes a bit of getting used to, but is definitely the best way to work on code. So next you will get to try this out in practice.

## Practice

For each week of this course you will get a Git repository with worksheets for you to complete. This repository will be set up for you on GitHub by [GitHub classroom](https://classroom.github.com/). You will clone that repository to your computer and then commit your work to that repository and push it back to GitHub. This gives the course leaders a chance to see your work and to comment on it. These repositories will be private repositories, visible only to you and the course leaders [Asta](https://github.com/astaaudzi) and [Gustav](https://github.com/gustavdelius) and to [Romain](https://github.com/baldrech) who provides technological support for the course. Below you will get a preparatory repository (also private) on which you can practice the workflow.

If you do not yet have an account on [GitHub](https://github.com) yet, please go there now and sign up, otherwise go there and sign in.

### Connect RStudio to GitHub

We will be interacting with Git and GitHub via RStudio. This just requires some initial setup but will be very convenient from then on. Please open RStudio and use the following command to tell Git about yourself, where of course you change the name and email address to your own.

```{r}
#| eval: false
usethis::use_git_config(user.name = "Jane Doe", 
                        user.email = "jane@example.org")
```

Next you will create a personal access token for accessing GitHub. The following command will bring you to the GitHub webpage that creates that personal access token for you:

```{r}
#| eval: false
usethis::create_github_token()
```

![](screenshots/new-pat.png)

You can edit the Note to something like "mizer course" or whatever will remind you later what this was for. You can leave the rest of the form as it is and scroll down to the bottom and press the "Generate token" button. That will lead you to a page that displays your new token:

![](screenshots/pat.png)

Leave this page open for now and return to RStudio and issue the command

```{r}
#| eval: false
gitcreds::gitcreds_set()
```

This will prompt you to enter your token. Go back to the webpage with your token and copy the token to your clipboard. Go back to RStudio and paste in that token and press Enter. That completes the setup. You will not have to do this again on this computer, but if you switch to a new computer, you will repeat the above.

If you run into difficulties with the above, please post about it in the comments section at the bottom of this page. If you want to dig in deeper yourself, you can take a look at the [troubleshooting](https://happygitwithr.com/troubleshooting.html) section in "[Happy Git and GitHub for the useR](https://happygitwithr.com/index.html)". But even if you manage to solve some problem yourself, please let us know about it in the comments.

### Create repository

To create your practice repository, please follow the following link:

<https://classroom.github.com/a/Fc-YtAIb>

Once you are logged into GitHub, this should bring you to a screen asking you to accept an assignment.

![](screenshots/accept_assignment.png){width="80%" fig-align="center"}

Please click on "Accept the assignment". This will first tell you that your repository is prepared and that you should refresh the page in your browser.

![](screenshots/refresh.png){width="80%" fig-align="center"}

When you hit the refresh button on your browwer after a just a short moment, you should see a page with a URL for your new repository on GitHub at the bottom.

![](screenshots/ready-to-go.png){width="80%" fig-align="center"}

Please follow that URL to your repository. You will then see a page with lots of stuff and with a big red "Code" button, which when clicked will give a popup button with

![Code button](screenshots/code-button.png){width="80%" fig-align="center"}

### Clone repository

Now we can use RStudio to clone this repository to your computer. For this you create a new RStudio project by clicking on the project drop-down menu at the top-right of the RStudio window and selecthing "New Project...".

![](screenshots/new-project.png)

That will open a dialog where you first choose "Version Control" and then choose "Git".

::: {layout-ncol="2"}
![](screenshots/version-control.png)

![](screenshots/git.png)
:::

In the resulting dialog window you paste in the repository URL that you copied from GitHub. You also specify the directory in your file area where you want the project directory to be saved. Then you click "Create Project".

![](screenshots/create-project.png)

RStudio now communicates with GitHub to download a clone of the repository and it also checks out all the files contained in the repository to the newly created directory. You can see them in the "Files" tab in RStudio.

### Edit work notebook

### Commit your work

### View feedback

TODO: use screenshots to talk the participant through their first commit and push and to how to view the feedback pull request.

Then they can go on to the second exercise and follow the same steps.
