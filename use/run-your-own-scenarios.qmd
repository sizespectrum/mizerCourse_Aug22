---
title: "Run other scenarios"
---

## Projecting future scenarios

Mizer can be used to explore future scenarios, where a simulation continues to project through time under different potential scenarios. The goal of this tutorial is to set these up these projections so that you can design your own future scenarios to explore. Here we will use mizerExperimental and mizerHowTo and explore example model of longline fishery that consists of targeting a single species, Patagonian toothfish. 

As usual, we need to have some packages installed.

```{r set-up, echo = F,message=F, warning=F,code_folding=T}
remotes::install_github("sizespectrum/mizerExperimental")
library(mizerExperimental)
# remotes::install_github("sizespectrum/mizerMR")
# library(mizerMR)
remotes::install_github("sizespectrum/mizerHowTo")
library(mizerHowTo)
library(tidyverse)
source("use/helper_functions.R")
```

Then we load the model 

```{r,message=FALSE}
sim <- readRDS("use/toothfish/params10.RDS")
params <- sim@params
plotBiomassObservedVsModelCustom(params,ratio = T)
plotGrowthCurves(sim,species_panel = T)
plotlySpectra(sim, power = 2, total = TRUE)
plotDiet2(sim)
```

This model is focussed on Patagonian toothfish and key prey species in the longline fishery.

For this model, we had the following main criteria for our project:

-   Modelled biomasses were within +/- 10-20% of the observed biomasses.

-   Unfished normalised biomass size spectrum slope that is negative and close to -1

-   Growth curves approximated the von Bertalanffy growth curves for each species.

-   Toothfish diet captured dietary changes with body size and became more piscivorous at larger sizes.

-   Recruitment parameters ensured single-species yield curves were dome-shaped, as expected by theory.

-   The modeled catches through time captured the trends in the reported catches through time.

We can see from these plots that we still have more work to do with refining the model. The size at age for some species seem much higher than the empirical parameters, feeding level of near satiation for all species and the biomass of some species is much higher than the data. However size-at-age data are typically highly variable. So, let's set some of those issues aside for now.

Let's take a look at how fishing is set up in this model.

```{r}
gear_params(params)
```

Currently we can see there is one gear - *longline* - which has a knife_edge selectivity function that starts fishing at very large sizes of toothfish only (*knife_edge_size*=2722 g). The size selectivity was derived from the length distribution of catches from the long-line fisheries data. If your model does not yet include fishing, you can set up your own fishing gear using the *gear_params()* function and by following the example [here](https://sizespectrum.org/mizer/reference/setFishing.html).

We can see that the *initial_effort* has been set to 1 and the *catchability* has been set to a very low number: 7e-07. This shows the model has been calibrated with a very low level of fishing mortality.

```{r,message=FALSE}
reproduction_level <- getReproductionLevel(params)
reproduction_level

plotYieldVsF(params,species="D.ele",no_steps=30,F_max=2)
# Fmsy around 0.4 for toothfish

```

Let's see what happens if reproduction level is reduced 

```{r}
params2 <- setBevertonHolt(params, reproduction_level = 0.85)
plotBevertonHolt2(params, params2, "D.ele")

sim2 <- project(params2, t_max = 20)
plotBiomass(sim2)
plotYieldVsF(params2,species="D.ele",no_steps=20,F_max=2)

```

This shows that altering the level of density-dependence in recruitment affects how sensitive toothfish (D.ele for short) are to fishing. The first model would enable toothfish to sustain (at equilbrium) much higher levels of fishing before it collapses.

## Comparing ecosystem states: effects of fishing relative to an unfished state

To be able to assess the wider ecosystem impacts of fishing in the community we need to understand how changes compare to an unfished state. We can use the above model unfished steady state with effort = 0 to do this combined with some functions to calculate ecological indicators.

Let's compare the current size spectra (with fishing) to the unfished size spectra to assess whether there is any evidence of a size-structured trophic cascade due to fishing.

```{r , code_folding=TRUE, eval = T, echo = T, warning=F}
sim0 <- projectToSteady(params, effort = 0, return_sim = TRUE, t_max = 200)
sim <- projectToSteady(params, effort = 1, return_sim = TRUE, t_max = 200)
plot_relative_biomass(sim0, sim)

```

Here we can see the effect of the reduction in large sized individuals of heavily fished species on the other sizes and species in the model, relative to the unfished steady state.

The abundance of some (but not all) of the smaller to medium sizes of prey are a lot higher when their larger predators are removed (note the logarithmic scale). 

We can do the same with Biomass to see when, if any, of the species collapse. For simplicity, we use \< 0.1 of B/B_unfished as a proxy for a reference point for population collapse. We can add other reference points to this kind of plot, for example a simple rule of thumb for B_msy could be 0.5\*B_unfished.

```{r,code_folding=TRUE, eval = T, echo = F, warning=F}
# collect the biomasses from unfish and calcualte the relative change
B0 <- getBiomass(sim0)[2,]
Brel <- melt(sweep(getBiomass(sim), 2, B0, "/")[2,])
ggplot(log10(Brel), aes(x = row.names(Brel), y = value)) +
  geom_bar(stat = "identity",
           show.legend = FALSE) + # Remove the legend
  xlab("Group") +
  ylab("Proportion of Unfished Biomass") 

```

### Fishing through time

Now let's see what happens if we change fishing in the future. To do this we set up two scenarios, one where the model starts with the last time step of the fished scenario and continues into the future  (the "status quo"). The other will be designed to explore "more sustainable scenario". Let's pick up the the model output we saved from the end of the last tutorial.

```{r}
#sim <- readRDS("use/toothfish/params10.RDS")
sim<-readRDS("use/simf3.rds")
params<-sim@params
```

The effort values in 2020 were

```{r, echo= FALSE}
(current_effort <- getEffort(sim)["2020", ])
```

Let's start a new simulation that begins with the logistic effort from 2020 and projects forward for 50 years. We will apply a linear decrease in effort for toothfish to a target value (here assumed for simplicity to be F=0.2).

To do this we need to work the effort array again (time x gear) to enable changes in effort through time.

```{r, code_folding=T, echo = FALSE}

sim_scen1<-project(params,initial_n = sim@n["2020",,], initial_n_pp = sim@n_pp["2020",],effort=current_effort,t_max = 50)
plot(sim_scen1)

proj_effort_scen1 <- matrix(current_effort, nrow = 50, ncol = 1, byrow = TRUE)

dimnames(proj_effort_scen1) <- list(time = 2021:2070,
                              gear = unique(gear_params(params)$gear))
# check it
plot(proj_effort_scen1,typ="l")
```

That was Scenario 1 ("status quo"), now let's set up Scenario 2, the "more sustainable" option we wish to explore. 
Again, if we are working in the same units as the effort above
we can change the F below to scale effort to be consistent with a value of F=0.2. So we need to set effort= catchability/targetF 
Otherwise if you assume targetF= catchability*E, and set catchability to 1, you can just use targetF=0.2 directly for Scenario 2.

```{r}
proj_effort_scen2 <- proj_effort_scen1
targetF<-0.2/gear_params(params)$catchability[1]
select_gear="longline"
# reach target by 10 years
proj_effort_scen2[1:10,select_gear] <- 
    seq(from = proj_effort_scen2[1], to = targetF, length = 10)
# then hold at target
proj_effort_scen2[11:50, select_gear] <- targetF
# check it
plot(proj_effort_scen2,typ="l")

```


Now we want to run the simulation forward using the *project* function.

```{r,code_folding=T}
# run the simulations forward, both using the 2020 abundances as initial values
params <- setInitialValues(params, sim)
sim_scen1 <- project(params, effort = proj_effort_scen1, t_max = 50)
sim_scen2 <- project(params, effort = proj_effort_scen2, t_max = 50)
```

How has this affected the catches and the biomass of other species in the system relative to fishing levels in 2020?

```{r}
#set the scenario to examine relative to 2020 levels
scen<-sim_scen2
plotYield(scen)
# plot change in biomass under each scenario relative to current values
B_current <- getBiomass(scen)[1, ]
Brel_scen <- melt(sweep(getBiomass(scen), 2, B_current, "/"))
colnames(Brel_scen)[2] <- "Species"
legend_levels <- intersect(names(scen@params@linecolour), Brel_scen$Species)
ggplot(Brel_scen) + 
  geom_line(aes(x = time,y = value,color = Species), size = 1) + 
  geom_hline(yintercept = 1, linetype = 1, colour = "grey", size = 0.75) +
  scale_y_continuous(name = "Relative biomass") +
  scale_color_manual(values = sim@params@linecolour[legend_levels]) +
  theme(legend.key = element_rect(fill = "white")) 
```

The above plot shows that relative to 2020 reducing fishing mortality to 0.2 still results in further declines in biomass and catches.

To compare the status of the stock we need to express the changes relative to the unfished state according to the model. This will provide us with a rough indicator of the level of depletion. Generally, we would consider a stock to be collapsed if biomass was < 0.1 of the unfished levels. Some data-poor single species fisheries management strategies seek for depletion to be around or above 0.5 of unfished levels.

Let's take a look at the relative exploitation status of the stocks using the projected values for 2050. We will put the y-axis scale is log10 to better visualise the differences across species. 

```{r}
# plot change in biomass under each scenario relative to unfished values
# get saved values from steady state without fishing that we generated earlier 
sim0<-readRDS("use/sim0.rds")
# get the unfished biomasses
B_unfished <- getBiomass(sim0)[1, ]
#scen 1
Brel_scen1_2050 <- getBiomass(sim_scen1)["2050",]/B_unfished

#scen 2
Brel_scen2_2050 <- getBiomass(sim_scen2)["2050",]/B_unfished

Brel_scens <- rbind(data.frame(species=names(Brel_scen1_2050),value=Brel_scen1_2050,scen="scen1"),data.frame(species=names(Brel_scen2_2050),value=Brel_scen2_2050,scen="scen2"))

# barplot comparing the 2 scenarios by 2050
ggplot(Brel_scens, aes(fill=scen, y=value, x=species)) + 
    geom_bar(position="dodge", stat="identity") + 
     geom_hline(yintercept = 0.1, linetype = 2, colour = "red", size = 0.5)  + scale_y_log10(name = "log10(Biomass/Biomass Unfished)")

saveRDS(sim_scen2,"sim_scen2.rds")
  
```
Species with B/B_unfished values that are below the red dashed line imply the stock is still collapsed.

We can see that when we decrease fishing to the targetF under scenario 2 this slightly improves the relative biomass compared to the status quo. Recovery would require lower levels of F to ensure sustainable fishing in the long-term. Another thing to note is that relative to the unfished community there are several species that actually increase under this fishing scenario - this is what happens when account for food web interactions in models!  

## Set up your own fishing scenario: simpler comparison of steady states

Rather than an entire time-series, we can also simply examine differences between two time-averaged states under different fishing regimes.

We can alter the fishing parameters using a function called *gear_params()* and by changing the *effort* input.

Let's take a look at the fishing parameters.

We can group species together according to the gears they are caught by. Initially let's just add another gear  - a trawler targeting icefish (C.gun). 

```{r}
# allocate species to gear types
gear_params(params) <- data.frame(
    gear = c("longline", "super_trawler"),
    species = c("D.ele", "C.gun"),
    catchability = c(1, 1),
    sel_fun = c("knife_edge", "knife_edge"),
    knife_edge_size = c(2722, 52)
    )
#check it
gear_params(params)
```

Note that catchability is set to 1. This is because the fishing "effort" was here assumed to be the fishing mortality rate of fully selected sizes (see here [setFishing](https://sizespectrum.org/mizer/reference/setFishing.html?q=set%20fishing)).

```{r}
params <- setFishing(params, initial_effort = 0.1)
```

Now let's run two simulations, one with light fishing mortality (F = 0.2) and one heavy fishing (F = 1.5).

```{r}
sim_unfished <- projectToSteady(params, effort = 0, t_max = 500)
plot(sim_unfished)
params_longline_trawl<-params
sim_longline_trawl <- projectToSteady(params_longline_trawl, effort = 0.1, t_max = 500)

params_longline<-params
gear_params(params_longline)$catchability[2]=0
sim_longline <- projectToSteady(params_longline, effort = 0.1, t_max = 500)
```

```{r, warning=F}
# plot change in biomass under each scenario relative to unfished values
# get the unfished biomasses
B_unfished <- getBiomass(sim_unfished)
#scen 1
Brel_longline <- getBiomass(sim_longline)/B_unfished

#scen 2
Brel_longline_trawl <- getBiomass(sim_longline_trawl)/B_unfished

Brel_scens <- rbind(data.frame(species=names(Brel_longline),value=Brel_longline,scen="longline"),data.frame(species=names(Brel_longline_trawl),value=Brel_longline_trawl,scen="longline_trawl"))

# barplot comparing the 2 scenarios by 2050
ggplot(Brel_scens, aes(fill=scen, y=value, x=species)) + 
    geom_bar(position="dodge", stat="identity") + 
     geom_hline(yintercept = 0.1, linetype = 2, colour = "red", size = 0.5)  + scale_y_log10(name = "log10(Biomass/Biomass Unfished)")


```

The impact of the combined trawl and longline appears to have more of an effect on C.gun but the biomass of D.ele is less depleted relative to the unfished state. 





