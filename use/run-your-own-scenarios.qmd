---
title: "Run your own scenarios"
---

## Projecting future recovery scenarios

We may now wish to explore the potential recovery of the larger species and sizes in the system. To do this we set up another scenario, where the model starts with the last time step of the fished scenario.

The effort values in 2018 were

```{r, echo= FALSE}
current_effort <- getEffort(sim)["2018", ]
knitr::kable(t(current_effort), caption = "Current effort",)
```

Let's start a new simulation that begins with the effort from 2018 and projects forward for 50 years. We will apply a linear reduction in effort for a selected species to a target value (here assumed for simplicity to be 0.2 with effort expressed in terms of the species' fishing mortality rate for fully selected sizes).

To do this we need to work with the effort array (time x gear) to enable changes in effort through time, for this scenario. Here we have a 'gear' for each species, since effort in this case were annual single-species fishing mortality estimates.

```{r, echo = FALSE}
sim_status_quo<-project(params,initial_n = sim@n["2018",,], initial_n_pp = sim@n_pp["2018",],effort=current_effort,t_max = 50)
proj_effort <- matrix(current_effort, nrow = 51, ncol = 12, byrow = TRUE)
dimnames(proj_effort) <- list(time = 2019:2069,
                              gear = unique(gear_params(params)$gear))
target<-0.2
select_species="Sprat"
# reach target by 10 years
proj_effort[1:10, select_species] <- 
    seq(from = proj_effort[1, select_species], to = target, length = 10)
# then hold at target
proj_effort[11:51, select_species] <- target
# check it
proj_effortDf <- data.frame("Time" = rownames(proj_effort), "Effort" = proj_effort[,select_species])
proj_effortDf_short <- proj_effortDf[c(1:13,49:51),] # looks nicer but keeping long version
flextable::regulartable(proj_effortDf_short) %>% flextable::set_caption("Projected effort on Sprat")
# run the simulation forward, using the 2018 abundances as initial values
params_status_quo <- setInitialValues(params, sim)
sim_scen <- project(params_status_quo, effort = proj_effort, t_max = 50)
# plot change in biomass relative to 2018 values
B_current <- getBiomass(sim_scen)[1, ]
Brel_scen <- melt(sweep(getBiomass(sim_scen), 2, B_current, "/"))
colnames(Brel_scen)[2] <- "Species"
legend_levels <- intersect(names(sim_scen@params@linecolour), Brel_scen$Species)
ggplot(Brel_scen) + 
  geom_line(aes(x = time,y = value,color = Species), size = 1) + 
  geom_hline(yintercept = 1, linetype = 1, colour = "grey", size = 0.75) +
  scale_y_continuous(name = "Relative biomass") +
  scale_color_manual(values = sim@params@linecolour[legend_levels]) +
  theme(legend.key = element_rect(fill = "white"))
```

We can see that when we reduce fishing on Sprat it increases the biomass of this species but also affects the biomass of other species in the community.

Are any species collapsed still?

```{r, echo = FALSE}
Brel_ref <- Brel_scen  %>% mutate(collapsed = value < 0.1)
plot_Brel_all<-ggplot(Brel_ref)+ 
  geom_line(aes(x=time,y=value), size = 1) + 
  ggpubr::theme_pubr() + 
  geom_hline(yintercept = 0.1, linetype=1, colour="red", size=0.75) +
  geom_hline(yintercept = 0.5, linetype=1, colour="steel blue", size=0.75) +
  facet_wrap(.~Species,scales = "free") +
  scale_y_continuous(name = "Relative Biomass") +
  scale_x_continuous(breaks = seq(2020,2060, length.out = 3), name = "Time")+
  annotate("text", x = 2027, y = 0.1+0.15, label = "Blim", color = "red") +
  annotate("text", x = 2025, y = 0.5+0.15, label = "Bmsy", color = "steel blue")
plot_Brel_all
```

## Example 2: Set up your own fishing scenario

Rather than an entire time-series, we can also simply examine differences between two time-averaged states under different fishing regimes.

We can alter the fishing parameters using a function called *gear_params()* and by changing the *effort* input.

Let's take a look at the fishing parameters. Note that the gears in the above model were already setup to be species-specific.

```{r, echo = FALSE}
knitr::kable(gear_params(params), caption = "gear parameters",row.names = F)
```

We can group these species together according to the gears they are caught by. Let's imagine a big super trawler.

```{r}
# allocate species to gear types
gear_params(params)$gear <- c("super_trawler")
```

Note that catchability is set to 1. This is because the fishing "effort" was here assumed to be the fishing mortality rate of fully selected sizes (see here [setFishing](https://sizespectrum.org/mizer/reference/setFishing.html?q=set%20fishing)).

The previous effort won't work with these new gears, as it is gear x time. We only have a single gear now, so this is easier to set up.

```{r}
params <- setFishing(params, initial_effort = 1)
```

Now let's run two simulations, one with light fishing effort (effort = 0.5) and one heavely fished (effort = 1.5).

```{r}
sim_light <- project(params, effort = .5, t_max = 100)
sim_heavy <- project(params, effort = 1.5, t_max = 100)
```

```{r, warning=F}
plot_relative_biomass(sim_light,sim_heavy)
```

As we saw before large individuals are the most affected by the high fishing effort. This create a trophic cascade where smaller individuals, even if they are affected by the same fishing effort, will increase in abundance due to the release in predation from larger individuals.

We can also extract the species biomasses:

```{r}
biomass<-rbind(getBiomass(sim_light)[100,],getBiomass(sim_heavy)[100,])
row.names(biomass)<-c("light","heavy")
```

As well as yields:

```{r, warning=F}
yield<-rbind(getYield(sim_light)[100,],getYield(sim_heavy)[100,])
row.names(yield)<-c("light","heavy") 
```

**Exercise: Now try to edit the above code to create your own fishing scenario.**


## other notes

NOTES: 

Develop your own scenarios. 

Changes through time


- Try different resource / fishing scenarios... 
- Could talk thorugh temperature

Comparison at steady state 

If you do not have time series you could alternatively design a similar experiment involving scenarios that do not have time series at steady state -  just the % change by some period (drawing from lit). 

For example - baseline , with catchability and Effort equal ( or F = 2 or at Fmsy) if you donâ€™t have catch data 

Increase/decrease resource 1 kappa
Increase/decrease resource 1 lambda 
Increase/decrease resource 2 lambda
Increase/decrease fishing effort and/or size at selectivity 

Experimental Matrix 

