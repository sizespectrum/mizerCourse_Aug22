---
title: "Tune reproduction sensitivity"
---

## Introduction

In the tutorial on [dynamics of size spectra](../understand/dynamics-of-spectra.html#reproduction-level) in week 1 we briefly looked at how density dependence of reproduction, or the so called reproduction level, can influence how species react to changes in mortality, such as from fishing. It might be good if you go back to this tutorial and remind yourself about two parameters that will affect reproduction level. They are `R_max` and `erepro`. `R_max` sets an upper limit to the rate at which new individuals enter the model (usually this represents the hatching of eggs) and `erepro` is the density-independent efficiency with which energy invested into reproduction is converted to gonadic mass.

**Important! What is recruitment?**

In fisheries, the term 'recruitment' usually refers to the numbers of fish that recruit into fishery, which will depend on egg production and on early density dependence, growth and mortality. In mizer we often use the term 'recruitment' to describe the number of individuals that enter the first size class in the model. This number will depend on the energy invested into reproduction and density dependence parameters $R_max$ and $erepro$. So please be aware of this difference, and remember that here recruitment means numbers in the first size class.

When we built our models in week 2 we were not concerned about the reproduction level and we kept the recruitment independent from energy invested into reproduction. The steady() function used in week 2 didn't care about setting realistic reproduction levels for the species. It is important to understand that by modifying $R_max$ and $erepro$ we can change the reproduction level - point along the density dependence curve that the species is - without changing biomass at steady state.

But because reproduction level will affect how species react to fishing, we now need to work on this aspect of the model. So let's look first at the reproduction levels of our species. As usual we load mizerExperimental, mizerMR and get additional code for improved yield curve functions.

```{r}
#| message: false
remotes::install_github("sizespectrum/mizerExperimental", ref = "tuneMR")
remotes::install_github("sizespectrum/mizerMR")
# TODO: move this to mizerExperimental
source("../experiment/getFCurves.R")
library(mizerExperimental)
library(mizerMR)
library(tidyverse)
```

## Sensitivity to changes

We load our Curonian lagoon model that we saved after [refining the model](../build/refine-model.qmd) in the previous tutorial using the `tuneParams()` gadget.

```{r}
cur_model <- readParams("../build/cur_model_refined.rds")
```

Let's look at reproduction levels of our steady state models.

```{r}
getReproductionLevel(cma)
```

For some species these reproduction levels don't look reasonable at all. They are extremely low, suggesting that recruitment will completely depend on species biomass. If there is small change in biomass, recruitment will decrease, that will lead to less biomass, less recruitment and so on. We want that when we change fishing effort in our models, species should settle into a new equilibrium. If this does not happen, the density dependence does not work very well. To test it we will change the effort and run the models for a little longer.

```{r}
#decrease effort from 0.5 to 0.3 and run for a little longer
sim <- project(cur_model, effort = 0.5)
plotBiomass(sim)
```

Yes, as expected biomasses keep changing over time and do not settle into a new equilibrium. Let's try to fix it.

## What should the sensitivity to fishing be?

We will need to tune the reproduction level of each species to make sure that their response to fishing is reasonable. How do we know what is reasonable? It is not a straightforward question. We can start by consulting general fisheries models. You can read about the principles of basic fisheries surplus production models in this excellent book by Malcolm Haddon "[Using R for Modelling and Quantitative Methods in Fisheries](https://haddonm.github.io/URMQMF/surplus-production-models.html)". In the simplest of these models, the population dynamics are specified in terms of a maximum population growth rate ***r*** (not to be confused with the maximum hatching rate `R_max` used in mizer) and a carrying capacity, which represents the unfished biomass level. Under these simplest standard assumptions about density dependence, maximum sustainable yield (MSY) is obtained when the stock is at 50% of the unfished biomass level. MSY is approximately r/4 \* unfished biomass and the fishing mortality that gives MSY is r/2. This means that if for example r = 0.5 then the peak of the yield curve should be at about F = 0.25. If unfished biomass is 1000 tons, MSY will be at 125 tons.

We usually do not know population growth rates (r) for our species, but we can look up estimates in the FishBase life-history tool section. Or we can use [generic estimates](https://studylib.net/doc/5888624/doc---fishbase) which suggest r of 0.6-1.5 for high resilience species (Von Bertalanffy growth rate K\>0.3, maturation age \< 1, high fecundity) and r of 0.2-1 for medium resilience species. We reproduce the table from this reference here:

![](../images/PopGrowthRates.png)

These values are derived from single species models with very different assumptions to those of ours, so they can only be used as very general guides. Alternatively, we can use Ken Andersen's book (TODO: proper reference) and expectations for species with different asymptotic sizes, as estimated from trait-based models (where all species parameters are determined in terms of the asymptotic size) and when all species are fished with 50% selectivity at 5% of their asymptotic size. The panels below represents species with different asymptotic sizes: 333 g (top), 10 g (bottom left), and 10 kg (bottom right). The lines show yield (solid black lines), yield per recruit (dashed lines), spawning stock biomass (dark gray lines), and recruitment (light gray lines), all scaled by their maximum value. We will not deal with yield per recruit, so ignore the dashed lines. This figure shows that highest yields are expected at fishing mortality of about 0.3-0.5/year.

![](/images/ReferencePointCurves.png){height = 200}

We can aim to achieve that in our models.

## Tuning sensitivity to fishing

Let's explore how changing reproduction levels will change our species sensitivity to fishing. 

If you have system specific data on how changes in fishing under system specific gear parameters change species biomasses, you should use these system specific details. We do not have such data for Curonian Lagoon, so we will explore species responses in general. For that purpose, for this exploration of the sensitivity of species, we set the gear parameters in such a way that all species are fished similarly.

### Setting gear selectivity

The reason why because our current gear parameters are set for a specific commercial fishery, which selects some species, but does not catch smallfish and almost no ruffe, for smaller fish they target only adults and for largest fish they also target juveniles. Catchabilities also differ a lot.

```{r}
gear_params(cmg)
```

To tune sensitivity of each species to extra mortality we will set catchability of all species to 1, so that effort values directly reflect fishing mortality. We will also set gear 50% selectivity to maturation length of each species and 25% selection to 25% maturation length.

Gear selectivity parameters are defined by length, so we will first convert w_mat and w_mat25 to length values.

```{r}
#calculate L_mat for all species
(L_mat = (species_params(cmg)$w_mat/species_params(cmg)$a)^(1/species_params(cmg)$b))
#calculate L_mat25 for all species
(L_25mat = (species_params(cmg)$w_mat25/species_params(cmg)$a)^(1/species_params(cmg)$b))

#Mizer is set in such way that we need to provide all gear parameters at once, so we first set a gear dataframe and then give it to mizer. 
#take gear parameters from the current model
(gp <- gear_params(cmg))
#update L50 selectivity with new values
gp$l50 <- L_mat
#update L25 selectivity with new values
gp$l25 <- L_25mat
#set all catchability to 1
gp$catchability <-1
```

We will assign these gear parameters for our parameterised model, but for simplicity we will use only one model.

```{r}

#assign the model to a new variable, so that we can keep both
cmg_newGear <- cmg
#set new gear parameters for the new model 
(gear_params(cmg_newGear) <- gp)

#as we change gear parameters we need to bring the model to steady again 
cmg_newGear <- steady(cmg_newGear)

#assess whether the model with new gear params is stable and not in fluctuating dynamics
sim_cmg_NewGear <- project(cmg_newGear, effort = 0.3, t_max = 100, dt = 0.1)
plotBiomass(sim_cmg_NewGear)
#good enough 

```

We saw previously that reproduction levels in our species were not very sensible. So we need to decide what reproduction level we should set to start our tuning. Remember when we change species reproduction level we do not change the overall biomass in the steady state (black circle in the figure below), but only the shape of recruitment curves and how quickly they reach the maximum.

TODO: add that plot

For now we will follow [Jacobsen et al. 2016](https://onlinelibrary.wiley.com/doi/full/10.1111/faf.12171) approach and assume the $erepro$ parameter for all species is the same. Once we modify erepro for all species, the reproduction level and Rmax will be adjusted to keep the steady state biomass the same. We can do that with setBevertonHolt() function as we briefly learned in week 1. After some experimentation we found that erepro of 0.002 gives reasonable reproduction levels. You can play with different erepro values for your models.

```{r}
cmg_newGear <- setBevertonHolt(cmg_newGear, erepro = 0.002)
#let's check what reproduction was set
getReproductionLevel(cmg_newGear)
#and look at species reproduction parameters 
species_params(cmg_newGear)[, c("erepro", "R_max")]

```

Remember, reproduction level is the ratio between RDD and Rmax and can vary between 0 and 1. It tells us how close the actual reproduction (after applying density dependence) is to the theoretical maximum, set by R_max. We can check this ratio

```{r}
#how close the RDD (actual recruitment, after applying density dependence) is to Rmax? This is the same as reproduction level 
getRDD(cmg_newGear)/species_params(cmg_newGear)$R_max
```

We can also look how close the actual reproduction is to the physiological reproduction - reproduction level produced by the model species, after accounting for the food intake and growth rates, but before applying density dependence (RDI)

```{r}
getRDD(cmg_newGear)/getRDI(cmg_newGear)

```

This tells us that most species can produce a huge amount more, but this reproduction is strongly capped by the R_max parameter we have (maximum recruitment possible in the system).

## Exploring F curves: one species at a time

To set reproduction level to the reasonable levels and get reasonable response to fishing, we will apply a range of fishing mortalities to one species at a time and check how their yields, biomasses (SSB), RDD and RDI will change. We can use a handy function plotFCurves(). If you want to save the resulting dataframe you can use getFCurves(). Let's start with breams

```{r}
#get the list of species to remind ourselves
species_params(cmg_newGear)$species

#what is the reproduction level of breams
getReproductionLevel(cmg_newGear)[3]

#plot F curves for this species. We will project with different fishing mortalities, up to a maximum of 1. 
plotFCurves(cmg_newGear, species = "breams", F_max = 1, no_steps = 20)
```

The yield curve (dashed line) does not taper down even at fishing mortality as high as 1, so we want to decrease reproduction level

```{r}
#first we save current reproduction level into a vector 
rep_level <- getReproductionLevel(cmg_newGear)

#replace our species reproduction level with a new value 
rep_level[3] <- 0.85

#asign it back to the model 
cmg_newGear <- setBevertonHolt(cmg_newGear, reproduction_level = rep_level)

#check that it worked 
getReproductionLevel(cmg_newGear)

#and plot F curves again
plotFCurves(cmg_newGear, species = "breams", F_max = 1, no_steps = 20)
```

Now we repeat the same for another species. Let's take pikeperch (it is species 8)

```{r}
#check its reproduction level, plot yield curve, adjust, check, plot again. Repeat until the yield curves look reasonable
getReproductionLevel(cmg_newGear)[8]
plotFCurves(cmg_newGear, species = "pikeperch", F_max = 1, no_steps = 20)
rep_level[8] <- 0.75
cmg_newGear <- setBevertonHolt(cmg_newGear, reproduction_level = rep_level)
getReproductionLevel(cmg_newGear)
plotFCurves(cmg_newGear, species = "pikeperch", F_max = 1, no_steps = 20)

```

Once we are happy with all the species, we save the parameter file

```{r}
#we can assign it to a new name (tuned), so it is easier to remember
cmg_newGearTuned <- cmg_newGear
saveParams(cmg_newGearTuned, "cmg_newGearTuned.rds")
```

Exercise 1 Now you do the same with your model

Important!

You might notice that in some cases plotFCurves() gives a warning that convergence was not reached. This means that species didn't settle into a new stable state with a new fishing level and we should not trust result for this specific fishing level. When we call plotFCurves() mizer will start with the initial effort and will go up all the way to the maximum value and then go down from the initial to 0. Often we find that it is the most extreme values that do not settle into an equilibrium. We can see that in an example with cma model (curonian model asta) - shoudl we show this example? If yes, we should use pikeperch

## Going back to the original gear parameters

Now we wonder what will happen to species sensitivity to fishing once we go back to the original gear parameters. Afterall, we used those parameters to tune our model using the tuneParams() gadget. Will they still work? Let's explore it.

```{r}
#now we read the file with all reproduction tuned, with RT referring to 'reproduction tuned'
cur_model_RT <- readRDS("cmg_ReproTuned.rds")
#check that reproduction level is as expected 
(repro_level_tuned <- getReproductionLevel(cur_model_RT))
#check our gear parameters 
gear_params(cur_model_RT)
# yes, these are generic gear parameters

#now let's assign the tuned reproduction level to the original curonian_model_gustav (cmg) model. We only changed reproduction level in this model, so we will overwrite reproduction level with a tuned one
cmg <- setBevertonHolt(cmg, reproduction_level = repro_level_tuned)

#check gear parameters
gear_params(cmg)
#check reproduction level 
getReproductionLevel(cmg)
#lookg good 


```

Now let's plot F curves for small fish using the model with tuned reproduction but original gear selectivity

```{r}
plotFCurves(cmg, species = "smallfish", F_max = 3, no_steps = 20)
```

This does not really make sense, because catchability of smallfish is set to 0, so we are actually not catching it all. Let's better look at ruffe. It is caught, with this the given selectivity we are only catching a few largest individuals

```{r}
plotFCurves(cmg, species = "ruffe", F_max = 10, no_steps = 20)
```

So, of course as we expect, even very high effort values (10) will see increasing yield, as we are really not catching much of this species.

Let's better look at a species that is caught commercially - roach

```{r}
#F curves with our system specific gear
plotFCurves(cmg, species = "roach", F_max = 1, no_steps = 20)
#F curves with generic gear that was used for tuning (and has different gear parameters)
plotFCurves(cur_model_RT, species = "roach", F_max = 1, no_steps = 20)
```

Why the difference? Let's look how the original gear parameters differ from our generic set

```{r}

gear_params(cmg)[3,]
gear_params(cur_model_RT)[3,]
```

We can see that with the system specific parameters, selectivity starts much later, so again we are only catching largest individuals. Therefore the species can sustain a lot more fishing. Note, however, that catchability was set to 2, so the x axis on the F curve plot should be multiplied by two (in reality we were applying fishing mortality from 0 to 2). You can do the same for other species.

##Project with a new model

Now that we calibrated reproduction level let's see how the model responds to changes in overall effort.

```{r}
#remind ourselves about the effort that was set
initial_effort(cmg)

#first run with the same effort and see that the model is still stable
sim_cmg <- project(cmg, effort = 0.3, t_max = 100, dt = 0.1)
plotlyBiomass(sim_cmg)

#now double the effort and see if the model stabilises into a new state
sim_cmg_F06 <- project(cmg, effort = 0.6, t_max = 100, dt = 0.1)
plotlyBiomass(sim_cmg_F06)

#
gear_params(cmg)
getBiomass(sim_cmg_F06)[101,]/getBiomass(sim_cmg)[101,]

```

### The rest should be modified because nothing crashes now

Generally yes, but one species crashes. What should we do, after all this effort. There are several options: 1) use steady again and adjust reproduction levels a bit; 2) adjust reproduction level only for a species that crashed; 3) go into more complex optimisation of reproduction levels using time series data; 4) run iterative tuning to adjust sensitivity to fishing in small steps automatically.

We will try the first option, let's adjust it with steady()

```{r}
test <- steady(cmg_newGearTuned)
#what has changed when using steady?
getReproductionLevel(test)/getReproductionLevel(cmg_newGearTuned)

#try to run simulations and vary effort 
sim_test <- project(test, effort = 0.8, t_max = 100, dt = 0.1)
plotBiomass(sim_test)
# it worked, species stabilise
```

TODO: give reference to the tuning with time series using optim (mizerHowTo)

## How do we decide that our model is now properly tuned?

Here is a list of criteria that could be used for models that were not calibrated to time series data:

-   Modelled biomasses were within +/- 20% (or some other proportion) of the observed biomasses.
-   Growth curves approximated the von Bertalanffy growth curves for each species.
-   Species diet capture dietary changes with body size, with predators becoming more piscivorous at larger sizes.
-   Recruitment parameters ensured single-species yield curves were dome-shaped, as expected by theory.
-   Modelled catches are similar to the observed catches
-   If available, catch size distributions approximately match, while accounting for gear selectivity in the model and observations

If time series data of F, species abundance and catches is available we also will look at: - Species recruitment parameters ensure that time series of fishing mortalities produced approximately expected catches and biomases. Some discrepancies are expected due to uncertainty in estimates and stochasticity

##Other resources

Some references to more advanced tuning and work in progress
